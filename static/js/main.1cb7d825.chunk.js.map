{"version":3,"sources":["components/documentation/DocumentComponent.js","components/generic/Loading.js","utils/tokensAndTheme.js","utils/globalPropTypes.js","components/generic/Button.js","utils/helpers.js","components/generic/Input.js","components/generic/DisplayTime.js","components/generic/DisplayRounds.js","components/generic/Panel.js","components/generic/TimeInput.js","sfx/alarm.wav","sfx/restStart.wav","sfx/roundEnd.wav","utils/customReactHooks.js","context/AppProvider.js","components/generic/TimerControls.js","views/DocumentationView.js","components/timers/Stopwatch.js","components/timers/Countdown.js","components/timers/XY.js","components/timers/Tabata.js","views/TimersView.js","views/AddView.js","App.js","index.js"],"names":["Wrapper","styled","div","Container","Title","RenderComponent","Documentation","table","DocumentComponent","this","props","title","component","propDocs","map","doc","prop","description","type","defaultValue","React","Component","sizeMapping","small","medium","large","Dot","span","size","color","DotGroup","Loading","propSize","defaultProps","colorTokens","PropTypes","oneOf","bool","oneOfType","string","number","arrayOf","node","func","themeColors","btnPrimary","btnPrimaryHover","btnSecondary","btnSecondaryHover","btnDanger","btnDangerHover","btnDisabled","inputBackground","inputPlaceholder","textLight","textMedium","textDark","timerSwitchTitle","timerSwitchTitleActive","timerSelectorGradient1","timerSelectorGradient2","timerBgGradient1","timerBgGradient2","H1","ButtonSpacer","BaseButton","button","ButtonPrimary","ButtonSecondary","ButtonDanger","Button","children","variant","passProps","disabled","transformTimeUnitToDisplayString","timeUnit","Error","numString","toString","length","HiddenLabel","label","StyledInput","input","Input","name","onChange","placeholder","value","min","max","e","target","eventVal","adjustedValue","Math","Number","toFixed","Time","DisplayTime","hours","minutes","seconds","id","RoundsLabel","Rounds","DisplayRounds","currRound","totalRounds","isRest","ImageBackgroundPane","InnerPane","Panel","TimeInputLabel","TimeInputWrapper","TimeInput","hoursVal","minutesVal","secondsVal","useInterval","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","usePersistedState","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","setItem","stringify","AppContext","createContext","emptyTimer","getKeysToAddOnChangeType","timerType","endTime","isIncrementing","startTime","workTime","restTime","reducer","state","action","indexToChange","propName","newValue","newState","initialState","numRounds","stateWithId","uuid","uuidv4","filter","timer","i","indexToRemove","push","updated","keysForNewType","AppProvider","useReducer","routineState","dispatch","timerIdx","setTimerIdx","currRoutineStep","hasStarted","setTimerHasStarted","setTimer","isTimerRunning","setTimerRunning","setCurrRound","isWorkTime","setIsWorkTime","useSound","timerEndSound","playTimerEnd","roundEndSound","playRoundEnd","restStartSound","playRestStart","timerComplete","switchToNextTimer","handleStop","alert","handleSetTimeInput","time","timeType","inputHours","inputMinutes","inputSeconds","valInt","parseInt","handleStart","idx","restartRoutine","resetTimer","thisTimer","timeToResetTo","newTimerIdx","multiplyTimerByValue","total","addTimers","timerA","timerB","hoursA","minutesA","secondsA","sec","floor","convertSecondsToHours","totalSecInHours","mins","convertSecondsToMinutes","totalSecInMinutes","computeRoutineStepTime","stepTime","totalRestTime","totalWorkTime","Provider","handleChangeNumRounds","num","numInt","isNaN","handleReset","handleResume","handleSetEndTime","idxToChange","handleSetRestTime","handleSetStartTime","handleSetWorkTime","handleSkipToEnd","roundComplete","tabataRoundComplete","tickDown","onCompleteCallback","tickUp","endHours","endMinutes","endSeconds","endOfMinute","computeTotalRoutineTime","totalTime","thisStepTime","displayTimeString","ButtonIconHolderRow","TimerControls","useContext","stopDisabled","startDisabled","resetDisabled","resumeDisabled","resetButton","onClick","icon","faSync","faStop","faFastForward","faPlay","inputValue","setInputValue","Stopwatch","noEndTimeInputted","disableResume","Countdown","startHours","startMinutes","startSeconds","noStartTimeInputted","XY","LessMarginH1","Tabata","workHours","workMinutes","workSeconds","restHours","restMinutes","restSeconds","Timers","BottomPanel","RoutinePane","TimerTitle","hasTimerStarted","ActiveTimerTitle","TimerSubtitle","App","timers","C","checkForInvalidRoundTimes","useCallback","to","deleteThisIndex","CenteredDiv","CenteredRow","CenteredCol","CenteredBlock","Scrollable","Dropdown","select","EditBlock","blockToRender","index","faTrash","StopwatchEditBlock","CountdownEditBlock","TabataEditBlock","XYEditBlock","AddView","faPlus","Nav","ul","NavItem","li","ViewCenterer","path","DocumentationView","TimersView","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1cb7d825.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  border: 1px solid #121212;\n  margin: 20px 0px;\n`;\n\nconst Container = styled.div`\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Title = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 20px;\n  font-size: 1.3rem;\n  font-family: BubblegumSans;\n`;\n\nconst RenderComponent = styled.div`\n  padding: 25px;\n  display: flex;\n  align-items: center;\n`;\n\nconst Documentation = styled.table``;\n\nclass DocumentComponent extends React.Component {\n  render() {\n    return (\n      <Wrapper>\n        <Title>{this.props.title}</Title>\n        <Container>\n          <RenderComponent>{this.props.component}</RenderComponent>\n          <Documentation>\n            <tbody>\n              <tr>\n                <th>Prop</th>\n                <th>Description</th>\n                <th>Type</th>\n                <th>Default value</th>\n              </tr>\n              {this.props.propDocs.map((doc) => {\n                return (\n                  <tr key={doc.prop}>\n                    <td>{doc.prop}</td>\n                    <td>{doc.description}</td>\n                    <td>{doc.type}</td>\n                    <td>\n                      <code>{doc.defaultValue}</code>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Documentation>\n        </Container>\n      </Wrapper>\n    );\n  }\n}\n\nexport default DocumentComponent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst primaryColor = \"#ffa2bf\";\n\nconst sizeMapping = {\n  small: 10,\n  medium: 14,\n  large: 20,\n};\n\nconst Container = styled.div`\n  animation: spin 1.5s linear infinite;\n\n  @-moz-keyframes spin {\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst Dot = styled.span`\n  display: block;\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  background-color: ${(props) => props.color};\n  border-radius: 100%;\n  transform: scale(0.75);\n  transform-origin: 50% 50%;\n  opacity: 0.3;\n  animation: wobble 1s ease-in-out infinite;\n\n  @keyframes wobble {\n    0% {\n      border-radius: 25%;\n    }\n    100% {\n      border-radius: 100%;\n    }\n  }\n`;\n\nconst DotGroup = styled.div`\n  display: flex;\n`;\n\nconst Loading = (props) =>  {\n  const { color, size: propSize } = props;\n  const size = sizeMapping[propSize];\n\n  return (\n    <Container>\n      <DotGroup>\n        <Dot size={size} color={color} />\n        <Dot size={size} color={color} />\n      </DotGroup>\n      <DotGroup>\n        <Dot size={size} color={color} />\n        <Dot size={size} color={color} />\n      </DotGroup>\n    </Container>\n  );\n}\n\nLoading.propTypes = {\n  size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\n  color: PropTypes.string,\n};\n\nLoading.defaultProps = {\n  size: \"medium\",\n  color: primaryColor,\n};\n\nexport default Loading;\n","import styled from \"styled-components\";\n\n/**\n * This page consists of a bunch of design tokens like colors and typography choices\n * that will be propagated across and reused throughout the app. Individual tokens may\n * be used in various places throughout the app, so this is a centralized place\n * for quickly editing and \"remixing\" them. If I had more typography, I'd build out\n * a separate list of typography tokens, and then use those to build out some re-usable\n * styled components for each major typography element. In that case I might also make\n * more use of props to pass more information into a typography component re: styling.\n */\n\n// Raw color values (HEX)\nexport const colorTokens = {\n    babyBlueLight: \"#61cbf5\", \n    babyBlue: \"#459Fd3\",\n    pinkLight: \"#E16BBD\",\n    pinkDarker: \"#B64995\",\n    redLight: \"#D34545\",\n    redDarker: \"#A42323\",\n    tealLight: \"#45D3AD\",\n    tealDarker: \"#419786\",\n    white: \"#FFFFFF\",\n    purpleLight: \"#617cb7\",\n    purpleMedium: \"#2b3254\",\n    lightGray: \"#DDDDDD\",\n};\n\n// Raw color values w/transparency (RGBA)\nexport const specialColorTokens = {\n    babyBlueLight: \"rgba(143,229,255,0.9)\",\n    purpleMedium: \"rgba(0,20,168,0.8)\"\n}\n\n// Values used across components for styling of specific areas & components\nexport const themeColors = {\n    // Buttons\n    btnPrimary: colorTokens.tealLight,\n    btnPrimaryHover: colorTokens.tealDarker,\n    btnSecondary: colorTokens.pinkLight,\n    btnSecondaryHover: colorTokens.pinkDarker,\n    btnDanger: colorTokens.redLight,\n    btnDangerHover: colorTokens.redDarker,\n    btnDisabled: colorTokens.lightGray,\n    // Inputs\n    inputBackground: colorTokens.white,\n    inputPlaceholder: colorTokens.babyBlue,\n    // Text\n    textLight: colorTokens.white,\n    textMedium: colorTokens.babyBlue,\n    textDark: colorTokens.purpleMedium,\n    // Timer Switcher\n    timerSwitchTitle: colorTokens.purpleMedium,\n    timerSwitchTitleActive: colorTokens.babyBlueLight,\n    timerSelectorGradient1: colorTokens.purpleLight,\n    timerSelectorGradient2: colorTokens.purpleMedium,\n    // Timer Background\n    timerBgGradient1: specialColorTokens.babyBlueLight,\n    timerBgGradient2: specialColorTokens.purpleMedium\n};\n\n// Shared Basic Typography Styles\nexport const H1 = styled.div`\n    font-family: Lobster;\n    font-size: 2rem;\n    text-align: center;\n`;","import PropTypes from \"prop-types\";\n\n/**\n * A centralized collection of all of the prop types used across\n * the project.\n */\n\nexport const globalPropTypes = {\n    // Styling Props\n    variant: PropTypes.oneOf([\"primary\", \"secondary\", \"danger\"]),\n\n    // HTML Attributes\n    buttonType: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\n    disabled: PropTypes.bool,\n    inputType: PropTypes.oneOf([\"text\", \"number\", \"submit\"]),\n    inputValue: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]),\n    placeholder: PropTypes.string,\n    name: PropTypes.string,\n    min: PropTypes.string,\n    max: PropTypes.string,\n    \n    // React Props\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ]),\n\n    // Event Handlers\n    onClick: PropTypes.func,\n    onChange: PropTypes.func,\n\n    // Timer-Specific Props\n    hours: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.oneOf([\"\"])\n    ]),\n    minutes: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.oneOf([\"\"])\n    ]),\n    seconds: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.oneOf([\"\"])\n    ]),\n    totalRounds: PropTypes.number,\n    currRound: PropTypes.number,\n    isRest: PropTypes.bool,\n\n};","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { globalPropTypes } from \"../../utils/globalPropTypes\";\nimport { themeColors } from \"../../utils/tokensAndTheme\";\n\nexport const ButtonSpacer = styled.div`\n    width: 300px;\n    justify-content: space-evenly;\n    display: flex;\n`;\n\nconst BaseButton = styled.button`\n    color: ${themeColors.textLight};\n    border: none;\n    border-radius: 5px;\n    padding: 3px 10px;\n    font-size: 20px;\n    font-weight: 700;\n    font-family: SourceCodePro;\n    :disabled {\n        background-color: ${themeColors.btnDisabled};\n        cursor: not-allowed;\n        :hover {\n            background-color: ${themeColors.btnDisabled};\n        }\n    }\n`;\n\nconst ButtonPrimary = styled(BaseButton)`\n    background-color: ${themeColors.btnPrimary};\n    :hover {\n        background-color: ${themeColors.btnPrimaryHover};\n    }\n`;\n\nconst ButtonSecondary = styled(BaseButton)`\n    background-color: ${themeColors.btnSecondary};\n    :hover {\n        background-color: ${themeColors.btnSecondaryHover};\n    }\n`;\n\nconst ButtonDanger = styled(BaseButton)`\n    background-color: ${themeColors.btnDanger};\n    :hover {\n        background-color: ${themeColors.btnDangerHover};\n    }\n`;\n\nconst Button = (props) => {\n    const { children, variant, ...passProps } = props;\n\n    switch(variant) {\n        case \"secondary\":\n            return (\n                <ButtonSecondary {...passProps}>{children}</ButtonSecondary>\n            );\n        case \"danger\": \n            return (\n                <ButtonDanger {...passProps}>{children}</ButtonDanger>\n            );\n        case \"primary\":\n        default: \n            return (\n                <ButtonPrimary {...passProps}>{children}</ButtonPrimary>\n            );\n    }\n}\nButton.propTypes = {\n    variant: globalPropTypes.variant,\n    type: globalPropTypes.buttonType,\n    disabled: globalPropTypes.disabled,\n    children: globalPropTypes.children,\n    onClick: globalPropTypes.onClick.isRequired,\n}\nButton.defaultProps = {\n    type: \"button\",\n    disabled: false,\n    variant: \"primary\",\n    children: \"Click me\"\n}\n\nexport default Button;\n","/**\n * Various functions for dealing with time that don't require state.\n * Note: hooks are in customReactHooks.js instead.\n */\n\n/**\n * Does some validation and transforms to 2 digit display string; throws error on invalid\n * @param {Number} number\n * @param {String} timeUnit\n * @returns {String} 2-digit representation of the number\n */\nexport const transformTimeUnitToDisplayString = (number, timeUnit) =>  {\n    if ( // quick validity check\n        (number < 0) ||\n        (timeUnit === \"minutes\" && number > 60) ||\n        (timeUnit === \"seconds\" && number > 60)\n    ) {\n        throw new Error (\"invalid value for time segment\");\n    }\n    \n    let numString = number.toString();\n\n    if (numString.length < 2) {\n      numString = \"0\" + numString;\n    }\n    return numString;\n  }\n\nconst prepareTimeForJSDateConvert = (time) => {\n  const newTime = [];\n  for (let i = 0; i < time.length; i++) {\n    switch(i) {\n      case 0: \n        newTime.push(transformTimeUnitToDisplayString(time[i], \"hours\"));\n        break;\n      case 1:\n        newTime.push(transformTimeUnitToDisplayString(time[i], \"minutes\"));\n        break;\n      case 2:\n        newTime.push(transformTimeUnitToDisplayString(time[i], \"seconds\"));\n        break\n      default:\n        throw new Error(\"Cannot prepare date for convert; time may have greater length than expected.\");\n    }\n  }\n  return newTime;\n}\n\nexport const isTimeABeforeTimeB = (timeA, timeB, includeEquals) => {\n  // Convert the array times into a JS string that can be used in JS DateTime\n  const dateA = new Date(\"01/01/2021 \" + prepareTimeForJSDateConvert(timeA).join(\":\") + \" PM\");\n  const dateB = new Date(\"01/01/2021 \" + prepareTimeForJSDateConvert(timeB).join(\":\") + \" PM\");\n  \n  // Lower time since epoch (in milliseconds) = earlier time\n  if (includeEquals) {\n    return dateA <= dateB;\n  }\n  return dateA < dateB;\n}\n\nexport const convertSecondsToHours = (sec) => {\n  const hours = Math.floor(sec / (60 * 60));\n  const leftovers = sec - (hours * 60 * 60);\n  return [hours, leftovers];\n}\n\nexport const convertSecondsToMinutes = (sec) => {\n  const mins = Math.floor(sec / 60);\n  const leftovers = sec - (mins * 60);\n  return [mins, leftovers];\n}\n\n/** \n * DEPRECATED/UNUSED: These helpers are leftover from a previous attempt to use Javascript\n * DateTime for the timers (apparently more accurate to do it this way than simple interval)\n * -- due to complexity, this has been tabled. Keeping these here in case they become useful.\n*/\nexport const convertMillisecToSec = (ms) => {\n  return ms / 1000;\n}\n\nexport const convertHoursToSeconds = (hours) => {\n  const seconds = hours * (60 * 60);\n  return seconds;\n}\n\n\nexport const convertMinutesToSeconds = (minutes) => {\n  const seconds = minutes * 60;\n  return seconds;\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport { themeColors } from \"../../utils/tokensAndTheme\";\nimport { globalPropTypes } from \"../../utils/globalPropTypes\";\nimport { transformTimeUnitToDisplayString } from \"../../utils/helpers\";\n\nconst HiddenLabel = styled.label`display:none;`;\n\nconst StyledInput = styled.input`\n    background-color: ${themeColors.inputBackground};\n    border: none;\n    width: 50px;\n    padding: 5px;\n    border-radius: 3px;\n    font-family: SourceCodePro;\n\n    ::placeholder {\n        color: ${themeColors.inputPlaceholder};\n        font-size: 20px;\n    }\n`;\n\nconst Input = (props) => {\n    const { type, name, onChange, disabled, placeholder, value, min, max } = props;\n\n    // Adds some additional validation for typed numbers\n    const validateChange = (e) => {\n        let { target: { value: eventVal, min, max } = {} } = e || {};\n        if (type === \"number\") { // ensure typed numerical values don't overflow min/max or include decimals\n            const adjustedValue = (Math.max(Number(min), Math.min(Number(max), Number(eventVal)))).toFixed(0);\n            e.target[\"value\"] = transformTimeUnitToDisplayString(adjustedValue);\n            onChange(e);\n        } else {\n            // Note: additional validation for numRounds handled in context\n            onChange(eventVal);\n        }\n    };\n\n    return (\n        <>\n            <HiddenLabel {...{ name }} ></HiddenLabel>\n            <StyledInput onChange={validateChange} {...{ name, type, disabled, placeholder, value, min, max }} />\n        </>\n    );\n}\nInput.propTypes = {\n    name: globalPropTypes.name.isRequired,\n    onChange: globalPropTypes.onChange.isRequired,\n    disabled: globalPropTypes.disabled,\n    placeholder: globalPropTypes.placeholder,\n    type: globalPropTypes.inputType,\n    value: globalPropTypes.inputValue,\n    min: globalPropTypes.min,\n    max: globalPropTypes.max,\n}\nInput.defaultProps = {\n    type: \"text\",\n    disabled: false,\n    value: \"\",\n    placeholder: \"Enter text here...\"\n}\n\nexport default Input;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { transformTimeUnitToDisplayString } from \"../../utils/helpers\";\nimport { globalPropTypes } from \"../../utils/globalPropTypes\";\n\nconst Time = styled.div`\n    font-size: 4em;\n    font-family: 'SourceCodePro';\n`;\n\nconst DisplayTime = (props) => {\n    const { hours, minutes, seconds } = props;\n    return (\n        <Time id=\"display-time\">\n            {transformTimeUnitToDisplayString(hours || 0, \"h\")}:\n            {transformTimeUnitToDisplayString(minutes || 0, \"m\")}:\n            {transformTimeUnitToDisplayString(seconds|| 0, \"s\")}\n        </Time>\n    );\n}\nDisplayTime.propTypes = {\n    hours: globalPropTypes.hours,\n    minutes: globalPropTypes.minutes,\n    seconds: globalPropTypes.seconds\n}\nDisplayTime.defaultProps = {\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n}\n\nexport default DisplayTime;","import React from \"react\";\nimport styled from \"styled-components\";\nimport { globalPropTypes } from \"../../utils/globalPropTypes\";\n\nexport const RoundsLabel = styled.div`\n  font-family: BubblegumSans;\n  padding-bottom: 15px;\n  padding-top: 10px;\n`;\n\nconst Rounds = styled.div`\n  font-size: 25px;\n  text-align: center;\n  font-family: BubblegumSans;\n`;\n\nconst DisplayRounds = (props) => {\n  const { currRound, totalRounds, isRest } = props;\n  return (\n    <Rounds>\n        (Round: {currRound}\n        {totalRounds > 0 && <span> of {totalRounds}</span>}\n        { isRest && <span> - Rest</span>})\n    </Rounds>\n  );\n}\nDisplayRounds.propTypes = {\n    totalRounds: globalPropTypes.totalRounds,\n    currRound: globalPropTypes.currRound,\n    isRest: globalPropTypes.isRest\n}\nDisplayRounds.defaultProps = {\n    totalRounds: 0,\n    currRound: 0,\n    isRest: false\n}\n\nexport default DisplayRounds;","import React from \"react\";\nimport styled from \"styled-components\";\nimport { themeColors } from \"./../../utils/tokensAndTheme\";\nimport { globalPropTypes } from \"../../utils/globalPropTypes\";\n\nconst ImageBackgroundPane = styled.div`\n    background: linear-gradient(120deg, ${themeColors.timerBgGradient1}, ${themeColors.timerBgGradient2}), url('/assignment-3-Bianca-Morris/maarten-van-den-heuvel-unsplash-sm.jpg');\n    height: 390px;\n    width: 550px;\n    border-radius: 0 20px 20px 0;\n    padding: 15px 20px 5px 20px;\n    background-position: center;\n    background-size: cover;\n`;\n\nconst InnerPane = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    flex-shrink: 0;\n    border-radius: 20px;\n    border: 4px dotted #FFFFFF;\n    height: 380px;\n    width: 100%;\n    color: ${themeColors.textLight};\n`;\n\n\nconst Panel = (props) => {\n    const { children } = props;\n    return (\n        <ImageBackgroundPane>\n            <InnerPane>\n            { children }\n            </InnerPane>  \n        </ImageBackgroundPane>\n    );   \n}\nPanel.propTypes = {\n    children: globalPropTypes.children.isRequired,\n}\n\nexport default Panel;","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { globalPropTypes } from \"../../utils/globalPropTypes\";\nimport Input from \"../generic/Input\";\n\nexport const TimeInputLabel = styled.div`\n  display: flex;\n  align-items: center;\n  font-family: BubblegumSans;\n  width: 100%;\n  justify-content: center;\n`;\n\nconst TimeInputWrapper = styled.div`\n    display: flex;\n    width: 200px;\n    justify-content: space-between;\n    margin: 10px 5px;\n`;\n\nconst TimeInput = (props) => {\n    const { disabled, hoursVal, minutesVal, secondsVal, onChange } = props;\n    return (\n        <TimeInputWrapper>\n            <Input placeholder=\"HH\" value={hoursVal} type=\"number\" name=\"hourInput\" min=\"0\" max=\"24\" {...{ disabled, onChange }} />\n            <Input placeholder=\"MM\" value={minutesVal} type=\"number\" name=\"minuteInput\" min=\"0\" max=\"59\" {...{ disabled, onChange }} />\n            <Input placeholder=\"SS\" value={secondsVal} type=\"number\" name=\"secondInput\" min=\"0\" max=\"59\" {...{ disabled, onChange }} />\n        </TimeInputWrapper>\n    )\n}\nTimeInput.propTypes = {\n    hoursVal: globalPropTypes.hours,\n    minutesVal: globalPropTypes.minutes,\n    secondsVal: globalPropTypes.seconds,\n    onChange: globalPropTypes.onChange.isRequired,\n    disabled: globalPropTypes.disabled\n}\nTimeInput.defaultProps = {\n    disabled: false,\n    hoursVal: 0,\n    minutesVal: 0,\n    secondsVal: 0\n}\n\nexport default TimeInput;\n","export default __webpack_public_path__ + \"static/media/alarm.0ac31e5c.wav\";","export default __webpack_public_path__ + \"static/media/restStart.54f09e8a.wav\";","export default __webpack_public_path__ + \"static/media/roundEnd.a673b70c.wav\";","import { useState, useEffect, useRef } from \"react\";\n\n/**\n * Borrowed from an example on Overreacted.io\n * https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n */\nexport function useInterval(callback, delay) {\n    const savedCallback = useRef();\n  \n    // Remember the latest function.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n  \n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n\n/**\n * Borrowed from https://github.com/prof-tejera/react7/blob/main/src/hooks.js\n */\nexport const usePersistedState = (key, initialValue) => {\n\n    // Loads the previously stored value from local storage, and if not present creates one\n    // with initialValue\n    const [storedValue, setStoredValue] = useState(() => {\n      try {\n        // Read initial value from local storage or fallback to the given initial value\n        const item = window.localStorage.getItem(key);\n        // console.log(\"item from localStorage\", item);\n        return item ? JSON.parse(item) : initialValue;\n      } catch (error) {\n        console.log(error);\n        return initialValue;\n      }\n    });\n  \n    // Updates app state and local storage with new value\n    const setValue = value => {\n      try {\n        setStoredValue(value);\n        window.localStorage.setItem(key, JSON.stringify(value));\n      } catch (error) {\n        console.log(error);\n      }\n    };\n  \n    return [storedValue, setValue];\n  };","import React, { useReducer } from 'react';\nimport useSound from 'use-sound';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport timerEndSound from '../sfx/alarm.wav';\nimport restStartSound from '../sfx/restStart.wav';\nimport roundEndSound from '../sfx/roundEnd.wav';\nimport { usePersistedState } from '../utils/customReactHooks';\nimport { convertSecondsToHours, convertSecondsToMinutes } from '../utils/helpers';\n\nexport const AppContext = React.createContext({});\n\nconst emptyTimer = [\"\", \"\", \"\"]; // [Hours, Minutes, Seconds]\n\nconst getKeysToAddOnChangeType = (timerType) => {\n  switch(timerType) {\n    case 'Stopwatch':\n      return { endTime: emptyTimer, isIncrementing: true };\n    case 'Countdown':\n      return { startTime: emptyTimer, isIncrementing: false };\n    case 'Tabata':\n      return { workTime: emptyTimer, restTime: emptyTimer, isIncrementing: false };\n    case 'XY':\n      return { startTime: emptyTimer, isIncrementing: false };\n    default:\n      throw new Error(\"Unexpected timerType\");\n  }\n}\n\nconst reducer = (state, action) => {\n    const { indexToChange, propName, newValue } = action;\n    const newState = [];\n\n    switch(action.type) {\n        case 'addTimer':\n            const initialState = { type: \"Stopwatch\", isIncrementing: true, numRounds: 1, endTime: emptyTimer };\n            const stateWithId = {...initialState, uuid: uuidv4()};\n            return [...state, stateWithId ];\n        case 'removeTimer':\n            return state.filter((timer, i) => i !== action.indexToRemove);\n        case 'clearAll':\n            return [];\n        case 'changePropVal':\n            for (let i=0; i < state.length; i++) {\n                if (i !== indexToChange) {\n                    newState.push(state[i]);\n                } else {\n                    let updated;\n                    if (propName === \"type\") {\n                      // add timer-specific props to state for new timer type (startTime, numRounds, etc.)\n                      const keysForNewType = getKeysToAddOnChangeType(newValue);\n                      updated = {...state[i], ...keysForNewType };\n                    } else {\n                      updated = {...state[i]};\n                    }\n                    updated[propName] = newValue;\n                    newState.push(updated);\n                }\n            }\n            return newState;\n        default:\n            throw new Error(\"Unexpected action passed into reducer.\");\n    }\n}\n\nconst AppProvider = ({ children }) => {\n  const [ routineState, dispatch ] = useReducer(reducer, []);\n  const [ timerIdx, setTimerIdx ] = usePersistedState(\"timer-idx\", 0); // Timer from routineState to display\n\n  const currRoutineStep = routineState[timerIdx];\n  const { type, startTime, endTime, restTime, workTime, numRounds, isIncrementing } = currRoutineStep || {};\n\n  // State shared across all timers\n  const [ hasStarted, setTimerHasStarted ] = usePersistedState('has-started', false); \n  const [ timer, setTimer ] = usePersistedState(\"timer\", emptyTimer);\n  const [ isTimerRunning, setTimerRunning ] = usePersistedState(\"is-timer-running\", false);\n\n  // States specific to certain timers\n  const [ currRound, setCurrRound ] = usePersistedState(\"curr-round\", 1); // Used in Tabata and XY\n  const [ isWorkTime, setIsWorkTime ] = usePersistedState(\"is-work-time\", true); // if False, is rest time\n\n  // Sound Hooks\n  const [playTimerEnd] = useSound(timerEndSound);\n  const [playRoundEnd] = useSound(roundEndSound);\n  const [playRestStart] = useSound(restStartSound);\n\n  const { 0: hours, 1: minutes, 2: seconds } = timer || [];\n\n  /* Counting up the seconds from 00:00:00 to endTime */\n  const tickUp = () => {\n    const { 0: endHours, 1: endMinutes, 2: endSeconds } = endTime || [];\n    if (\n      (seconds || 0) === (endSeconds || 0) && \n      (minutes || 0) === (endMinutes || 0) &&\n      (hours || 0) === (endHours || 0)\n    ) {\n      timerComplete();\n    } else {\n      const endOfMinute = seconds === 59;\n      const endOfHour = minutes === 59;\n      \n      if (endOfMinute && endOfHour) { // update hour\n        setTimer([(hours || 0) + 1, 0, 0]);\n      } else if (endOfMinute) { // update minute\n        setTimer([hours, (minutes || 0) + 1, 0]);\n      } else { // update second\n        setTimer([hours, minutes, (seconds || 0) + 1]);\n      }\n    }\n  }\n\n  /* Counting down the seconds from start time to 00:00:00 */\n  const tickDown = (onCompleteCallback) => {\n    if (!hours && !minutes && !seconds) {\n      onCompleteCallback();\n    } else if (!minutes && !seconds) {\n      setTimer([(hours - 1), 59, 59]);\n    } else if (!seconds) {\n      setTimer([hours, (minutes - 1), 59]);\n    } else {\n      setTimer([hours, minutes, (seconds - 1)]);\n    }\n  }\n\n  const timerComplete = () => {\n    playTimerEnd();\n\n    // Not finished with routine\n    if (timerIdx !== routineState.length - 1) {\n      switchToNextTimer();\n    } else {\n      handleStop();\n      alert('Routine complete!');\n    }\n  }\n\n  const roundComplete = () => {\n    if (currRound !== numRounds) {\n      playRoundEnd();\n      // start a new round\n      setTimer(startTime);\n      setCurrRound(currRound + 1);\n    } else {\n      timerComplete();\n    }\n  }\n\n  const tabataRoundComplete = () => {\n    if (!isWorkTime && (currRound === numRounds)) {\n      timerComplete();\n    } else {\n      if (isWorkTime) {\n        playRestStart();\n        setTimer(restTime); // update counter with rest time\n        setIsWorkTime(false); // convert to rest period\n      } else {\n        playRoundEnd();\n        setTimer(workTime); // update counter with work times\n        setIsWorkTime(true); // convert to work period\n        setCurrRound(currRound + 1); // start a new round\n      }\n    }\n  }\n\n  // Event Handlers\n  const handleSetStartTime = (e, idxToChange, startTime) => {\n    handleSetTimeInput(e, idxToChange, startTime, \"startTime\");\n  }\n\n  const handleSetWorkTime = (e, idxToChange, workTime) => {\n    handleSetTimeInput(e, idxToChange, workTime, \"workTime\");\n  }\n\n  const handleSetRestTime = (e, idxToChange, restTime) => {\n    handleSetTimeInput(e, idxToChange, restTime, \"restTime\");\n  }\n\n  const handleSetEndTime = (e, idxToChange, endTime) => {\n    handleSetTimeInput(e, idxToChange, endTime, \"endTime\");\n  }\n\n  const handleSetTimeInput = (e, indexToChange, time, timeType) => {\n    const { target: { value, name } = {} } = e || {};\n    const { 0: inputHours, 1: inputMinutes, 2: inputSeconds } = time || [];\n    const valInt = parseInt(value || 0);\n    const action = {\n      type: \"changePropVal\",\n      propName: timeType,\n      indexToChange,\n    };\n    switch(name) {\n      case \"hourInput\":\n        action.newValue = [valInt, inputMinutes, inputSeconds]\n        break;\n      case \"minuteInput\":\n        action.newValue = [inputHours, valInt, inputSeconds];\n        break;\n      case \"secondInput\":\n        action.newValue = [inputHours, inputMinutes, valInt];\n        break;\n      default:\n        throw new Error(\"Attempting to handle time change for unrecognized input.\");\n    };\n    dispatch(action);\n  }\n\n  const handleChangeNumRounds = (indexToChange, num) => {\n    const numInt = parseInt(num || 0);\n    if (!isNaN(numInt)) {\n      dispatch({\n        type: \"changePropVal\",\n        propName: \"numRounds\",\n        newValue: numInt,\n        indexToChange\n      });\n    }\n  }\n\n  const handleStop = (e) => {\n    setTimerRunning(false);\n  }\n\n  const handleStart = (e, idx) => {\n    const { startTime, workTime, restTime } = routineState[idx || timerIdx] || {};\n    if (!hasStarted){\n      setTimerHasStarted(true);\n    }\n    if (!isIncrementing) {\n      if (type === \"XY\" || type === \"Countdown\") {\n        setTimer(startTime);\n      } else { // Tabata\n        if (isWorkTime) {\n          setTimer(workTime);\n        } else {\n          setTimer(restTime);\n        }\n      }\n    } else {\n        setTimer(emptyTimer); // start over from beginning for stopwatch\n    }\n    setTimerRunning(true);\n  }\n\n  const handleResume = (e) => {\n    if (!isIncrementing) {\n      setTimerRunning(true);\n    } else {\n      handleStart(e);\n    }\n  }\n\n  const handleReset = (e) => {\n    handleStop();\n    resetTimer(timerIdx);\n    setCurrRound(1);\n    setIsWorkTime(true);\n  }\n\n  const handleSkipToEnd = (e) => {\n    if (!isIncrementing) { // XY, Tabata, Countdown\n      setTimer([0, 0, 0]);\n      setCurrRound(numRounds);\n      setIsWorkTime(false);\n    } else { // Stopwatch\n      setTimer(endTime);\n    }\n    timerComplete();\n  }\n\n  const restartRoutine = () => {\n    setTimerRunning(false);\n    if (timerIdx) {setTimerIdx(0); }\n    if (routineState.length > 0) { resetTimer(0); }\n    setCurrRound(1);\n    setIsWorkTime(true);\n    setTimerHasStarted(false);\n  }\n\n  const resetTimer = (idx) => {\n    const thisTimer = routineState[idx];\n    const { type } = thisTimer;\n    if (type !== \"Stopwatch\") {\n      const mapTimerTypeToReset = {\n        \"Countdown\": \"startTime\",\n        \"XY\": \"startTime\",\n        \"Tabata\": \"workTime\"\n      };\n      const timeToResetTo = thisTimer[mapTimerTypeToReset[type]];\n      setTimer(timeToResetTo);\n    } else {\n      setTimer(emptyTimer);\n    }\n    if (idx === 0) { setTimerHasStarted(false); }\n  }\n\n  const switchToNextTimer = () => {\n    const newTimerIdx = timerIdx + 1;\n    setTimerIdx(newTimerIdx);\n\n    if (isTimerRunning && routineState.length > 0) {\n      // Update states and trigger next timer\n      setCurrRound(1);\n      setIsWorkTime(true);\n      resetTimer(newTimerIdx);\n    }      \n  }\n\n  // Restart routine if end up in a situation where state is invalid (should only happen after editing routine)\n  if (\n    (!currRoutineStep && routineState.length > 0)  // invalid timerIdx\n    // (currRound > numRounds) // invalid round\n  ) { \n    // Leftover state from previous run interfering with current run; adjust start index and restart routine\n    restartRoutine();\n  };\n\n  const multiplyTimerByValue = (thisTimer, value) => {\n    let total;\n    for (let i = 1; i <= value; i++) {\n      if (i === 1) {\n        total = [...thisTimer];\n      } else {\n        total = addTimers(total, [...thisTimer]);\n      }\n    }\n    return total;\n  }\n\n  const addTimers = (timerA, timerB) => {\n    const { 0: hoursA, 1: minutesA, 2: secondsA } = timerA || [];\n    const { 0: hoursB, 1: minutesB, 2: secondsB } = timerB || [];\n    \n    // convert everything to seconds\n    const totalHoursInSec = ((hoursA || 0) + (hoursB || 0)) * 3600;\n    const totalMinutesInSec = ((minutesA || 0) + (minutesB || 0)) * 60;\n    const totalSec = totalHoursInSec + totalMinutesInSec + (secondsA || 0) + (secondsB || 0);\n\n    // convert back\n    const { 0: totalSecInHours = 0, 1: remainderFromHours = 0 } = convertSecondsToHours(totalSec);\n    const { 0: totalSecInMinutes = 0, 1: remainderFromMinutes = 0 } = convertSecondsToMinutes(remainderFromHours);\n    return [totalSecInHours, totalSecInMinutes, remainderFromMinutes];\n  }\n\n  const computeRoutineStepTime = (idx) => {\n    if (!routineState[idx]) { return emptyTimer };\n    const {\n      type,\n      numRounds = 1,\n      startTime = emptyTimer,\n      workTime = emptyTimer,\n      restTime = emptyTimer,\n      endTime = emptyTimer\n    } = routineState[idx];\n\n    let stepTime;\n    switch(type) {\n      case \"Stopwatch\":\n        stepTime = endTime;\n        break;\n      case \"XY\":\n        stepTime = multiplyTimerByValue(startTime, numRounds);\n        break;\n      case \"Tabata\":\n        const totalRestTime = multiplyTimerByValue(restTime, numRounds);\n        const totalWorkTime = multiplyTimerByValue(workTime, numRounds);\n        stepTime = addTimers(totalRestTime, totalWorkTime);\n        break;\n      case \"Countdown\":\n        stepTime = startTime;\n        break;\n      default: \n        throw new Error(\"Unexpected timer type in computeRoutineStepTime\");\n    }\n    return stepTime;\n  }\n\n  const computeTotalRoutineTime = () => {\n    let totalTime;\n    for (let i = 0; i < routineState.length; i++) {\n      const thisStepTime = computeRoutineStepTime(i);\n      if (i === 0) { \n       totalTime = thisStepTime;\n      } else {\n        totalTime = addTimers(thisStepTime, totalTime);\n      }\n    }\n    return totalTime;\n  }\n\n  const displayTimeString = (time) => {\n    const { 0: hours, 1: minutes, 2: seconds } = time || [];\n    return `Hours: ${hours || 0}, Minutes: ${minutes || 0}, Seconds: ${seconds || 0}`;\n  }\n\n  return (\n    <AppContext.Provider\n      value={{\n        currRound,\n        setCurrRound,\n        endTime,\n        handleChangeNumRounds,\n        handleReset,\n        handleResume,\n        handleSetEndTime,\n        handleSetRestTime,\n        handleSetStartTime,\n        handleSetWorkTime,\n        handleSkipToEnd,\n        handleStart,\n        handleStop,\n        hours,\n        isIncrementing,\n        isTimerRunning,\n        isWorkTime,\n        minutes,\n        numRounds,\n        restTime,\n        roundComplete,\n        seconds,\n        setTimerIdx,\n        startTime,\n        tabataRoundComplete,\n        tickDown,\n        tickUp,\n        timerComplete,\n        hasStarted,\n        timerIdx,\n        workTime,\n        routineState,\n        dispatch,\n        restartRoutine,\n        computeRoutineStepTime,\n        computeTotalRoutineTime,\n        displayTimeString,\n        currRoutineStep\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppProvider;","import React, { useContext } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFastForward, faPlay, faStop, faSync } from '@fortawesome/free-solid-svg-icons';\n\nimport { AppContext } from \"../../context/AppProvider\";\nimport Button, { ButtonSpacer } from \"../generic/Button\";\nimport { globalPropTypes } from \"../../utils/globalPropTypes\";\nimport styled from \"styled-components\";\n\n\nconst ButtonIconHolderRow = styled.div`\n    display: flex;\n    justify-items: center;\n    align-items: center;\n    >span {\n        font-size: 18px;\n    }\n    >svg {\n        margin-right: 5px;\n    }\n`;\n\nconst TimerControls = (props) => {\n  const {\n    isTimerRunning,\n    handleSkipToEnd,\n    handleStop,\n    handleStart,\n    handleReset,\n    handleResume,\n    hasStarted\n  } = useContext(AppContext);\n\n  const { \n    stopDisabled, startDisabled, resetDisabled, resumeDisabled\n  } = props;\n\n  const resetButton = (\n    <Button onClick={handleReset} variant=\"secondary\" disabled={resetDisabled}>\n        <ButtonIconHolderRow>\n            <FontAwesomeIcon icon={faSync} size=\"xs\"/>\n            <span>RESET</span>\n        </ButtonIconHolderRow>\n    </Button>);\n\n  if (!isTimerRunning) {\n    return (\n      <>\n        <ButtonSpacer>\n            { hasStarted &&\n                <Button onClick={handleResume} disabled={resumeDisabled}>\n                    <ButtonIconHolderRow>\n                        <FontAwesomeIcon icon={faPlay} size=\"xs\"/>\n                        <span>RESUME</span>\n                    </ButtonIconHolderRow>\n                    \n                </Button>}\n            { !hasStarted &&\n                <Button onClick={handleStart} disabled={startDisabled}>\n                    <ButtonIconHolderRow>\n                        <FontAwesomeIcon icon={faPlay} size=\"xs\"/>\n                        <span>START</span>\n                    </ButtonIconHolderRow>\n                </Button>} \n            { hasStarted && resetButton }\n        </ButtonSpacer>\n      </>\n    )\n  }\n  return (\n    <>\n      <ButtonSpacer>\n        { isTimerRunning &&\n            <Button onClick={handleStop} variant=\"danger\" disabled={stopDisabled}>\n                <ButtonIconHolderRow>\n                    <FontAwesomeIcon icon={faStop} size=\"xs\"/>\n                    <span>STOP</span>\n                </ButtonIconHolderRow>\n            </Button>} \n        { resetButton }\n        { isTimerRunning && \n            <Button onClick={handleSkipToEnd}>\n                <ButtonIconHolderRow>\n                    <FontAwesomeIcon icon={faFastForward} size=\"xs\"/>\n                    <span>FF</span>\n                </ButtonIconHolderRow>\n            </Button> }\n      </ButtonSpacer>\n    </>\n  );\n}\nTimerControls.propTypes = {\n    startDisabled: globalPropTypes.disabled,\n    stopDisabled: globalPropTypes.disabled,\n    resetDisabled: globalPropTypes.disabled,\n    resumeDisabled: globalPropTypes.disabled\n}\nTimerControls.defaultProps = {\n    startDisabled: false,\n    stopDisabled: false,\n    resetDisabled: false,\n    resumeDisabled: false,\n}\n\nexport default TimerControls;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport DocumentComponent from \"../components/documentation/DocumentComponent\";\n\nimport Loading from \"../components/generic/Loading\";\nimport Button from \"../components/generic/Button\";\nimport Input from \"../components/generic/Input\";\nimport DisplayTime from \"../components/generic/DisplayTime\";\nimport DisplayRounds from \"../components/generic/DisplayRounds\";\nimport Panel from \"../components/generic/Panel\";\nimport TimeInput from \"../components/generic/TimeInput\";\nimport TimerControls from \"../components/generic/TimerControls\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst Title = styled.div`\n  font-size: 2rem;\n  margin-top: 25px;\n  font-family: Lobster;\n`;\n\nconst Documentation = () => {\n\n  const [ inputValue, setInputValue ] = useState(\"Test\");\n  \n  return (\n    <Container>\n      <div>\n        <Title>Documentation</Title>\n        <DocumentComponent\n          title=\"Loading spinner \"\n          component={<Loading />}\n          propDocs={[\n            {\n              prop: \"size\",\n              description: \"Changes the size of the loading spinner\",\n              type: \"string\",\n              defaultValue: \"'medium'\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Button \"\n          component={<Button onClick={() => alert(\"You clicked the button!\")} />}\n          propDocs={[\n            {\n              prop: \"type\",\n              description: \"HTML attribute type of the button ('button' | 'submit' | 'reset')\",\n              type: \"string\",\n              defaultValue: \"'button'\",\n            },\n            {\n              prop: \"disabled\",\n              description: \"Is the button clickable?\",\n              type: \"boolean\",\n              defaultValue: \"false\",\n            },\n            {\n              prop: \"onClick\",\n              description: \"Function defining what to do when button is clicked\",\n              type: \"function\",\n              defaultValue: \"undefined\",\n            },\n            {\n              prop: \"variant\",\n              description: \"One of: ('primary' | 'secondary' | 'danger')\",\n              type: \"string\",\n              defaultValue: \"'primary'\",\n            },\n            {\n              prop: \"children\",\n              description: \"What to render inside of the button\",\n              type: \"node OR array of nodes\",\n              defaultValue: \"'Click Me'\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Input \"\n          component={<Input name=\"docInput\" onChange={setInputValue} value={inputValue} />}\n          propDocs={[\n            {\n              prop: \"type\",\n              description: \"HTML attribute type of the input ('text' | 'number' | 'submit')\",\n              type: \"string\",\n              defaultValue: \"'text'\",\n            },\n            {\n              prop: \"placeholder\",\n              description: \"Placeholder text for the input\",\n              type: \"string\",\n              defaultValue: \"'Enter text here...'\"\n            },\n            {\n              prop: \"disabled\",\n              description: \"Is is possible to enter text?\",\n              type: \"boolean\",\n              defaultValue: \"false\",\n            },\n            {\n              prop: \"onChange\",\n              description: \"Function defining what to do when text is updated\",\n              type: \"function\",\n              defaultValue: \"undefined\",\n            },\n            {\n              prop: \"name\",\n              description: \"An identifier for this input\",\n              type: \"string\",\n              defaultValue: \"undefined\",\n            },\n            {\n              prop: \"value\",\n              description: \"Current value of the input (should match 'type' prop)\",\n              type: \"string or number\",\n              defaultValue: \"''\",\n            },\n            {\n              prop: \"min\",\n              description: \"If type is number, this will be used as the minimum the field accepts\",\n              type: \"string\",\n              defaultValue: \"undefined\",\n            },\n            {\n              prop: \"max\",\n              description: \"If type is number, this will be used as the maximum the field accepts\",\n              type: \"string\",\n              defaultValue: \"undefined\"\n            }\n          ]}\n        />\n        <DocumentComponent\n          title=\"Display Time \"\n          component={<DisplayTime hours={0} minutes={0} seconds={0} />}\n          propDocs={[\n            {\n              prop: \"hours\",\n              description: \"A numeric representation of hours; max 2 digits\",\n              type: \"number\",\n              defaultValue: \"0\",\n            },\n            {\n              prop: \"minutes\",\n              description: \"A numeric representation of minutes; max 2 digits\",\n              type: \"number\",\n              defaultValue: \"0\",\n            },\n            {\n              prop: \"seconds\",\n              description: \"A numeric representation of seconds; max 2 digits\",\n              type: \"number\",\n              defaultValue: \"0\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Display Rounds \"\n          component={<DisplayRounds />}\n          propDocs={[\n            {        \n              prop: \"currRound\",\n              description: \"The current round\",\n              type: \"number\",\n              defaultValue: \"0\",\n            },\n            {\n              prop: \"totalRounds\",\n              description: \"The total number of rounds selected\",\n              type: \"number\",\n              defaultValue: \"0\"\n            },\n            {\n              prop: \"isRest\",\n              description: \"Is this a rest interval?\",\n              type: \"boolean\",\n              defaultValue: \"false\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Panel \"\n          component={<Panel children={<div/>}/>}\n          propDocs={[\n            {        \n              prop: \"children\",\n              description: \"React children to render inside of the panel\",\n              type: \"node or array of nodes\",\n              defaultValue: \"undefined\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"TimeInput \"\n          component={<TimeInput onChange={() => console.log(\"timeinput\")}/>}\n          propDocs={[\n            {\n              prop: \"hoursVal\",\n              description: \"A numeric representation of hours; max 2 digits\",\n              type: \"number\",\n              defaultValue: \"0\",\n            },\n            {\n              prop: \"minutesVal\",\n              description: \"A numeric representation of minutes; max 2 digits\",\n              type: \"number\",\n              defaultValue: \"0\",\n            },\n            {\n              prop: \"secondsVal\",\n              description: \"A numeric representation of seconds; max 2 digits\",\n              type: \"number\",\n              defaultValue: \"0\",\n            },\n            {\n              prop: \"disabled\",\n              description: \"Should the inputs be disabled or enabled?\",\n              type: \"boolean\",\n              defaultValue: \"false\"\n            },\n            {\n              prop: \"onChange\",\n              description: \"A single function to handle updates for hours, minutes and seconds\",\n              type: \"function\",\n              defaultValue: \"undefined\"\n            }\n          ]}\n        />\n        <DocumentComponent\n          title=\"TimerControls \"\n          component={<TimerControls startDisabled={true} stopDisabled={true} resetDisabled={true} />}\n          propDocs={[\n            {\n              prop: \"startDisabled\",\n              description: \"Should start button be disabled?\",\n              type: \"boolean\",\n              defaultValue: \"false\",\n            },\n            {\n              prop: \"stopDisabled\",\n              description: \"Should stop button be disabled?\",\n              type: \"boolean\",\n              defaultValue: \"false\"\n            },\n            {\n              prop: \"resetDisabled\",\n              description: \"Should reset button be disabled?\",\n              type: \"boolean\",\n              defaultValue: \"false\"\n            },\n            {\n              prop: \"context (not technically a prop...)\",\n              description: \"This component needs to use global AppContext for event handlers and conditional display.\",\n              type: \"object\",\n              defaultValue: \"undefined\"\n            }\n          ]}\n        />\n      </div>\n    </Container>\n  );\n}\n\nexport default Documentation;\n","import React, { useContext } from \"react\";\n\nimport { AppContext } from \"../../context/AppProvider\";\nimport { useInterval } from \"../../utils/customReactHooks\";\n// import { isTimeABeforeTimeB } from \"../../utils/helpers\";\n\nimport { H1 } from \"../../utils/tokensAndTheme\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport TimeInput, { TimeInputLabel } from \"../generic/TimeInput\";\nimport TimerControls from \"../generic/TimerControls\";\n\n/**\n * A timer that counts up to endTime amount of time (e.g. count up to 2 minutes and 30 seconds, starting at 0)\n */\nconst Stopwatch = (props) =>  {\n  const {\n    currRoutineStep,\n    minutes,\n    seconds,\n    hours,\n    isTimerRunning,\n    tickUp,\n    handleSetEndTime,\n  } = useContext(AppContext);\n\n  const { endTime, uuid } = currRoutineStep;\n  const { 0: endHours, 1: endMinutes, 2: endSeconds } = endTime || [];\n  \n  useInterval(() => {\n    tickUp();\n  }, isTimerRunning ? 1000 : null);\n\n  // Set some constraints to avoid strange state combos\n  const noEndTimeInputted = !endHours && !endMinutes && !endSeconds;\n  // const endTimeEarlierThanStartTime = isTimeABeforeTimeB(endTime, [hours, minutes, seconds], true);\n  // const disableStart = noEndTimeInputted || endTimeEarlierThanStartTime;\n  const disableResume = !!(hours || 0 === endHours || 0) && !!(minutes || 0 === endMinutes || 0 ) && !!(seconds || 0 === endSeconds || 0);\n\n  return (\n    <div id={\"stopwatch-\" + uuid}>\n      <H1>Stopwatch</H1>\n      <DisplayTime {...{ hours, minutes, seconds }} />\n      <TimeInputLabel>\n        End Time: \n        <TimeInput disabled hoursVal={endHours} minutesVal={endMinutes} secondsVal={endSeconds} onChange={handleSetEndTime} />\n      </TimeInputLabel>\n      <TimerControls startDisabled={noEndTimeInputted} resumeDisabled={disableResume} />\n    </div>\n  );\n}\n\nexport default Stopwatch;\n","import React, { useContext } from \"react\";\n\nimport { AppContext } from \"../../context/AppProvider\";\nimport { useInterval } from \"../../utils/customReactHooks\";\n// import { isTimeABeforeTimeB } from \"../../utils/helpers\";\n\nimport { H1 } from \"../../utils/tokensAndTheme\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport TimeInput, { TimeInputLabel } from \"../generic/TimeInput\";\nimport TimerControls from \"../generic/TimerControls\";\n\n/**\n * A timer that counts up to startTime amount of time (e.g. count up to 2 minutes and 30 seconds, starting at 0).\n */\nconst Countdown = (props) => {\n  const {\n    currRoutineStep,\n    hours,\n    minutes,\n    seconds,\n    isTimerRunning,\n    handleSetStartTime,\n    tickDown,\n    timerComplete,\n  } = useContext(AppContext);\n\n  const { startTime, uuid } = currRoutineStep;\n  const { 0: startHours, 1: startMinutes, 2: startSeconds } = startTime || [];\n\n  useInterval(() => {\n    tickDown(timerComplete);\n  }, isTimerRunning ? 1000 : null);\n\n  const noStartTimeInputted = !startHours && !startMinutes && !startSeconds;\n  // const endTimeEarlierThanStartTime = isTimeABeforeTimeB(startTime, [hours, minutes, seconds], true);\n  // const disableStart = noStartTimeInputted || endTimeEarlierThanStartTime;\n\n  return (\n    <div id={\"countdown-\" + uuid}>\n      <H1>Countdown</H1>\n      <DisplayTime {...{ hours, minutes, seconds }} />\n      <TimeInputLabel>\n        Start Time:\n        <TimeInput disabled hoursVal={startHours} minutesVal={startMinutes} secondsVal={startSeconds} onChange={handleSetStartTime} />\n      </TimeInputLabel>\n      <TimerControls startDisabled={noStartTimeInputted}/>\n    </div>\n  );\n}\n\nexport default Countdown;\n","import React, { useContext } from \"react\";\n\nimport { AppContext } from \"../../context/AppProvider\";\nimport { useInterval } from \"../../utils/customReactHooks\";\n\nimport { H1 } from \"../../utils/tokensAndTheme\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport DisplayRounds from \"../generic/DisplayRounds\";\nimport TimeInput, { TimeInputLabel } from \"../generic/TimeInput\";\nimport TimerControls from \"../generic/TimerControls\";\n\n/**\n * A timer that counts down from starTime per round, for numRounds number of rounds\n * (e.g. 1 minute for 10 minutes would count down from 1 minute to 0, then start another countdown, etc, 10 times)\n */\nconst XY = (props) => {\n  const {\n    currRoutineStep,\n    hours,\n    minutes,\n    seconds,\n    isTimerRunning,\n    handleSetStartTime,\n    tickDown,\n    currRound,\n    roundComplete,\n  } = useContext(AppContext);\n\n  const { startTime, numRounds, uuid } = currRoutineStep;\n  const { 0: startHours, 1: startMinutes, 2: startSeconds } = startTime || [];\n\n  useInterval(() => {\n    tickDown(roundComplete);\n  }, isTimerRunning ? 1000 : null);\n\n  const noStartTimeInputted = !startHours && !startMinutes && !startSeconds;\n  // const invalidRounds = currRound > numRounds;\n  // const disableStart = noStartTimeInputted || invalidRounds;\n  const disableResume = numRounds === currRound && (!hours && !minutes && !seconds);\n\n  return (\n    <div id={\"xy-\" + uuid}>\n      <H1>XY</H1>\n      <DisplayRounds {...{ currRound }} totalRounds={numRounds}/>\n      <DisplayTime {...{ hours, minutes, seconds }} />\n      <TimeInputLabel>\n        Start Time:\n        <TimeInput disabled hoursVal={startHours} minutesVal={startMinutes} secondsVal={startSeconds} onChange={handleSetStartTime}/>\n      </TimeInputLabel>\n      <TimerControls startDisabled={noStartTimeInputted} resumeDisabled={disableResume} />\n    </div>\n  );\n}\n\nexport default XY;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\n\nimport { AppContext } from \"../../context/AppProvider\";\nimport { useInterval } from \"../../utils/customReactHooks\";\n\nimport { H1 } from \"../../utils/tokensAndTheme\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport DisplayRounds from \"../generic/DisplayRounds\";\nimport TimeInput, { TimeInputLabel } from \"../generic/TimeInput\";\nimport TimerControls from \"../generic/TimerControls\";\n\nconst LessMarginH1 = styled(H1)`\n  margin: 5px;\n`;\n\n/**\n * An interval timer with work/rest periods. \n * Eg: 20s/10s, 8 rounds, would count down from 20 seconds to 0, then count down from 10 seconds to 0, then from 20, then from 10, etc, for 8 rounds.\n * A full round includes both the work and rest. In this case, 20+10=30 seconds per round.\n */\nconst Tabata = (props) => {\n  const {\n    currRoutineStep,\n    hours,\n    minutes,\n    seconds,\n    isTimerRunning,\n    isWorkTime,\n    handleSetWorkTime,\n    handleSetRestTime,\n    tickDown,\n    currRound,\n    tabataRoundComplete\n  } = useContext(AppContext);\n\n  const { workTime, restTime, numRounds, uuid } = currRoutineStep;\n  const { 0: workHours, 1: workMinutes, 2: workSeconds } = workTime || [];\n  const { 0: restHours, 1: restMinutes, 2: restSeconds } = restTime || [];\n\n  useInterval(() => {\n    tickDown(tabataRoundComplete);\n  }, isTimerRunning ? 1000 : null);\n\n  const noWorkTimeInputted = !workHours && !workMinutes && !workSeconds;\n  const noRestTimeInputted = !restHours && !restMinutes && !restSeconds;\n  const startDisabled = (noWorkTimeInputted && noRestTimeInputted); // allow to start as long as work or rest is present\n  const disableResume = numRounds === currRound && (!hours && !minutes && !seconds);\n\n  return (\n    <div id={\"tabata-\" + uuid}>\n      <LessMarginH1>Tabata</LessMarginH1>\n      <DisplayRounds {...{ currRound }} totalRounds={numRounds} isRest={!isWorkTime}/>\n      <DisplayTime {...{ hours, minutes, seconds }}/>\n      <TimeInputLabel>\n        Work Time:\n        <TimeInput disabled onChange={handleSetWorkTime} hoursVal={workHours} minutesVal={workMinutes} secondsVal={workSeconds} />\n      </TimeInputLabel>\n      <TimeInputLabel>\n        Rest Time:\n        <TimeInput disabled onChange={handleSetRestTime} hoursVal={restHours} minutesVal={restMinutes} secondsVal={restSeconds}/>\n      </TimeInputLabel>\n      <TimerControls {...{ startDisabled }}  resumeDisabled={disableResume}/>\n    </div>\n  );\n}\n\nexport default Tabata;\n","import React, { useCallback, useContext, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nimport Panel from \"../components/generic/Panel\";\nimport Stopwatch from \"../components/timers/Stopwatch\";\nimport Countdown from \"../components/timers/Countdown\";\nimport XY from \"../components/timers/XY\";\nimport Tabata from \"../components/timers/Tabata\";\nimport { AppContext } from \"../context/AppProvider\";\n\nimport { H1, themeColors } from \"../utils/tokensAndTheme\";\nimport { Link } from \"react-router-dom\";\nimport Button from \"../components/generic/Button\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Timers = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst BottomPanel = styled.div`\n  margin-top: 10px;\n`;\n\nconst RoutinePane = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 250px;\n  height: 350px;\n  justify-content: flex-start;\n  background: linear-gradient(143deg, ${themeColors.timerSelectorGradient1} 0%, ${themeColors.timerSelectorGradient2} 100%);\n  overflow-y: scroll;\n  border-radius: 20px 0 0 20px;\n  padding: 30px;\n`;\n\nconst TimerTitle = styled.div`\n  background-color: ${themeColors.timerSwitchTitle};\n  color: ${themeColors.textMedium};\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 20px 0;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  text-transform: uppercase;\n  font-weight: 700;\n  font-family: SourceCodePro;\n\n  :hover {\n    ${ props => (props.isTimerRunning || props.hasTimerStarted) ? \"\" :\n      `::before {\n        content: \"(DELETE THIS TIMER)\"\n      }` }\n\n    ${ props => (props.isTimerRunning || props.hasTimerStarted) ? \"\": `background-color: ${themeColors.btnDangerHover};\\n`}\n    ${ props => (props.isTimerRunning || props.hasTimerStarted) ? \"\": `color: ${themeColors.textLight};` }\n  }\n`;\n\nconst ActiveTimerTitle = styled(TimerTitle)`\n  background-color: ${themeColors.timerSwitchTitleActive};\n  color: ${themeColors.textLight};\n`;\n\nconst TimerSubtitle = styled.div`\n  font-size: 10px;\n`;\n\nfunction App() {\n  const {\n    dispatch,\n    numRounds,\n    handleChangeNumRounds,\n    currRound,\n    setCurrRound,\n    timerIdx,\n    isTimerRunning,\n    hasTimerStarted,\n    routineState = [],\n    currRoutineStep,\n    restartRoutine,\n    computeRoutineStepTime,\n    computeTotalRoutineTime,\n    displayTimeString\n  } = useContext(AppContext);\n\n  const timers = {\n    \"Stopwatch\": { C: <Stopwatch /> },\n    \"Countdown\": { C: <Countdown /> },\n    \"XY\": { C: <XY /> },\n    \"Tabata\": { C: <Tabata /> },\n  };\n\n  const checkForInvalidRoundTimes = useCallback(() => {\n    const { type } = routineState[timerIdx] || {};\n    if (type === \"Tabata\" || type === \"XY\") {\n      if (numRounds <= 0) {\n        alert(`Invalid numRounds for Timer @${timerIdx} (must be >=1). Setting to 1 and re-loading.`)\n        handleChangeNumRounds(timerIdx, 1);\n        \n      } else if (currRound > numRounds) {\n        alert(`Invalid numRounds for Timer @ index (must be <= numRounds). Setting currRound ${currRound} equal to numRounds ${numRounds}.`)\n        // Invalid numRounds for Timer @ index (must be <= totalRounds). Setting to be equal to currentRound.\n        setCurrRound(numRounds);\n        // console.log(`invalid currRound ${currRound} > numRounds ${numRounds}`);\n      }\n    }\n    // valid\n  }, [handleChangeNumRounds, setCurrRound, currRound, numRounds, timerIdx, routineState]);\n\n  useEffect(() => {\n    checkForInvalidRoundTimes();\n  }, [checkForInvalidRoundTimes]);\n\n  const routineDefined = routineState.length !== 0;\n  if (!routineDefined) {\n    return (\n      <Timers>\n        <div>\n          <H1>Ready to work out?</H1>\n          <Link to=\"/add\">Create a Routine</Link>\n        </div>\n      </Timers>\n    );\n  }\n\n  if (!currRoutineStep) { throw new Error(\"Routine defined, but no current step. TimerIdx might be out of bounds.\")};\n  \n  const deleteThisIndex = (idx) => {\n    if (!isTimerRunning) {\n      dispatch({ type: \"removeTimer\", indexToRemove: idx })\n    }\n  };\n\n  const { type } = currRoutineStep;\n\n  return (\n    <Wrapper>\n      <Timers>\n        <RoutinePane >\n          <Link to=\"/add\"><Button variant=\"secondary\" onClick={() => null}>Add to Routine</Button></Link>\n          { routineState.map((timer, idx) => {\n            if (timerIdx === idx) {\n              return (\n                <ActiveTimerTitle key={timer.uuid} {...{idx, isTimerRunning, hasTimerStarted }} onClick={(e) => deleteThisIndex(idx)} >\n                  {timer.type}\n                  <TimerSubtitle>({displayTimeString(computeRoutineStepTime(idx))})</TimerSubtitle>\n                </ActiveTimerTitle>\n              );\n            }\n            return (\n              <TimerTitle key={timer.uuid} {...{idx, isTimerRunning, hasTimerStarted }} onClick={(e) => deleteThisIndex(idx)} >\n                {timer.type}\n                <TimerSubtitle>({displayTimeString(computeRoutineStepTime(idx))})</TimerSubtitle>\n              </TimerTitle>\n            );\n          })}\n        </RoutinePane>\n        <Panel>\n          { timers[type].C }\n        </Panel>\n      </Timers>\n      <BottomPanel>\n        { timerIdx !== 0 ? \n          <Button onClick={() => restartRoutine()}>Restart Routine</Button>\n          : null }\n        <TimerSubtitle>Total Time: {displayTimeString(computeTotalRoutineTime())}</TimerSubtitle>\n      </BottomPanel> \n    </Wrapper>\n  );\n}\n\nexport default App;\n","import { faPlus, faSync, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport Button from \"../components/generic/Button\";\nimport { RoundsLabel } from \"../components/generic/DisplayRounds\";\nimport Input from \"../components/generic/Input\";\nimport TimeInput, { TimeInputLabel } from \"../components/generic/TimeInput\";\nimport { AppContext } from \"../context/AppProvider\";\n\n\nimport { H1 } from \"../utils/tokensAndTheme\";\n\nconst CenteredDiv = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst CenteredRow = styled(CenteredDiv)`\n  flex-direction: row;\n`;\nconst CenteredCol = styled(CenteredDiv)`\n  flex-direction: column;\n`;\n\nconst CenteredBlock = styled(CenteredCol)`\n    padding: 20px 40px;\n    background: #ffffff;\n    margin: 10px;\n`;\n\nconst Scrollable = styled.div`\n    max-height: 450px;\n    overflow-y: scroll; \n`;\n\nconst Dropdown = styled.select`\n    padding: 5px;\n    margin: 0 5px;\n`;\n\nconst AddView = () => {\n    const { routineState = [], dispatch } = useContext(AppContext);\n\n    return (\n        <CenteredCol>\n            <H1>Add to Workout Routine</H1>\n\n            <Scrollable>\n                {routineState.map((timer, i) => {\n                    const { uuid } = timer;\n                    return <EditBlock key={uuid} {...timer} index={i} {...{ dispatch }} />\n                })}\n            </Scrollable>\n            \n\n            <CenteredRow>\n                <Button onClick={() => dispatch({ type: \"addTimer\" })}>\n                    <FontAwesomeIcon icon={faPlus} size=\"xs\"/>\n                    Add New Timer\n                </Button>\n                { (routineState.length !== 0) &&\n                    <Button variant=\"danger\" onClick={() => dispatch({ type: \"clearAll\" })}>\n                        <FontAwesomeIcon icon={faSync} size=\"xs\"/>\n                        Start Over\n                    </Button>}\n            </CenteredRow>\n        </CenteredCol>\n    );\n};\n\nconst EditBlock = (props) => {\n    const { type, dispatch, index, ...passProps } = props;\n    const timerTypes = [\"Stopwatch\", \"Countdown\", \"Tabata\", \"XY\"];\n    \n    let blockToRender;\n    switch (type) {\n        case \"Stopwatch\": \n            blockToRender = <StopwatchEditBlock {...passProps} {...{ dispatch, index }} />\n            break;\n        case \"Countdown\": \n            blockToRender = <CountdownEditBlock {...passProps} {...{ dispatch, index }} />\n            break;\n        case \"Tabata\":\n            blockToRender = <TabataEditBlock {...passProps} {...{ dispatch, index }} />\n            break;\n        case \"XY\": \n            blockToRender = <XYEditBlock {...passProps} {...{ dispatch, index }} />\n            break;\n        default:\n            throw new Error(\"Unrecognized type of timer in EditBlock #\" + index);\n    }\n\n    return (\n        <CenteredBlock>\n            <CenteredRow>\n                <div>\n                    <strong>Type:</strong>\n                    <Dropdown value={type} onChange={(e) => dispatch({ type: \"changePropVal\", indexToChange: index, newValue: e.target.value, propName: \"type\" })} >\n                        {timerTypes.map(timer => <option key={timer} value={timer}>{timer}</option>) }\n                    </Dropdown>\n                </div>\n                <Button variant=\"danger\" onClick={() => dispatch({ type: \"removeTimer\", indexToRemove: index })} >\n                    <FontAwesomeIcon icon={faTrash} size=\"xs\"/>\n                </Button>\n            </CenteredRow>\n            { blockToRender }\n        </CenteredBlock>\n    );\n};\n\nconst StopwatchEditBlock = (props) => {\n    const { handleSetEndTime } = useContext(AppContext);\n    const { endTime, index } = props;\n    const { 0: hours = \"\", 1: minutes = \"\", 2: seconds = \"\" } = endTime || [];\n\n    return (\n        <>\n            <TimeInputLabel>\n                <strong>End Time:</strong>\n                <TimeInput hoursVal={hours} minutesVal={minutes} secondsVal={seconds}\n                    onChange={(e) => handleSetEndTime(e, index, endTime )} />\n            </TimeInputLabel>\n        </>\n    );\n}\n\nconst CountdownEditBlock = (props) => {\n    const { handleSetStartTime } = useContext(AppContext);\n    const { startTime, index } = props;\n    const { 0: hours = \"\", 1: minutes = \"\", 2: seconds = \"\" } = startTime || [];\n\n    return (\n        <>\n            <TimeInputLabel>\n                <strong>Start Time:</strong>\n                <TimeInput hoursVal={hours} minutesVal={minutes} secondsVal={seconds}\n                    onChange={(e) => handleSetStartTime(e, index, startTime )} />\n            </TimeInputLabel>\n        </>\n    );\n}\n\nconst TabataEditBlock = (props) => {\n    const { handleSetWorkTime, handleSetRestTime, handleChangeNumRounds } = useContext(AppContext);\n    const { \n        workTime, restTime, numRounds, index\n    } = props;\n\n    const { 0: workHours = \"\", 1: workMinutes = \"\", 2: workSeconds = \"\" } = workTime || [];\n    const { 0: restHours = \"\", 1: restMinutes = \"\", 2: restSeconds = \"\" } = restTime || [];\n\n    return (\n        <>\n            <TimeInputLabel>\n                <strong>Work Time:</strong>\n                <TimeInput hoursVal={workHours} minutesVal={workMinutes} secondsVal={workSeconds}\n                    onChange={(e) => handleSetWorkTime(e, index, workTime )}/>\n            </TimeInputLabel>\n            <TimeInputLabel>\n                <strong>Rest Time:</strong>\n                <TimeInput hoursVal={restHours} minutesVal={restMinutes} secondsVal={restSeconds}\n                    onChange={(e) => handleSetRestTime(e, index, restTime )}/>\n            </TimeInputLabel>\n            <RoundsLabel>\n                # of Rounds:\n                <Input name=\"numRoundsTabata\" value={numRounds} placeholder=\"1\" onChange={(num) => handleChangeNumRounds(index, num)} />\n            </RoundsLabel>\n        </>\n    );\n}\n\nconst XYEditBlock = (props) => {\n    const { handleSetStartTime, handleChangeNumRounds } = useContext(AppContext);\n    const { \n        startTime, numRounds, index\n    } = props;\n    const { 0: hours = \"\", 1: minutes = \"\", 2: seconds = \"\" } = startTime || [];\n\n    return (\n        <>\n            <TimeInputLabel>\n                <strong>Start Time:</strong>\n                <TimeInput hoursVal={hours} minutesVal={minutes} secondsVal={seconds}\n                    onChange={(e) => handleSetStartTime(e, index, startTime )} />\n            </TimeInputLabel>\n            <RoundsLabel>\n                # of Rounds:\n                <Input name=\"numRoundsXY\" value={numRounds} placeholder=\"1\" onChange={(num) => handleChangeNumRounds(index, num)} />\n            </RoundsLabel>\n        </>\n    );\n}\n\n\nexport default AddView;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport DocumentationView from \"./views/DocumentationView\";\nimport TimersView from \"./views/TimersView\";\nimport AddView from \"./views/AddView\";\n\nimport AppProvider from \"./context/AppProvider\";\n// import { H1 } from \"./utils/tokensAndTheme\";\n\nconst Container = styled.div`\n  background: #f0f6fb;\n  height: 100vh;\n  overflow: auto;\n`;\n\nconst Nav = styled.ul`\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  background-color: #333333;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst NavItem = styled.li`\n  display: inline-block;\n  padding: 10px;\n  text-decoration: none;\n  \n  >a {\n    color: #ffffff;\n    :hover {\n      color: #dedede;\n    }\n  }\n`;\n\nconst ViewCenterer = styled.div`\n  display: flex;\n  height: calc(100% - 40px);\n  justify-content: center;\n`;\n\nfunction App() {\n  return (\n    <Container>\n      <Router>\n        <nav>\n          <Nav>\n            <NavItem>\n              <Link to=\"/\">Timers</Link>\n            </NavItem>\n            <NavItem>\n              <Link to=\"/docs\">Documentation</Link>\n            </NavItem>\n          </Nav>\n        </nav>\n        <ViewCenterer>\n          <Switch>\n            <Route path=\"/docs\">\n              <DocumentationView />\n            </Route>\n            <Route path=\"/add\">\n              <AppProvider>\n                <AddView />\n              </AppProvider>\n            </Route>\n            <Route path=\"/\">\n              <AppProvider>\n                <TimersView />\n              </AppProvider>\n            </Route>\n          </Switch>\n        </ViewCenterer>\n      </Router>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}