{"version":3,"sources":["components/documentation/DocumentComponent.js","components/generic/Loading.js","utils/tokensAndTheme.js","utils/globalPropTypes.js","components/generic/Button.js","utils/helpers.js","components/generic/Input.js","components/generic/DisplayTime.js","components/generic/DisplayRounds.js","components/generic/Panel.js","components/generic/TimeInput.js","sfx/alarm.wav","sfx/restStart.wav","sfx/roundEnd.wav","utils/customReactHooks.js","components/timers/Stopwatch.js","components/timers/Countdown.js","components/timers/XY.js","components/timers/Tabata.js","utils/constants.js","components/reducers/routine.js","context/AppProvider.js","components/generic/TimerControls.js","views/DocumentationView.js","views/TimersView.js","components/generic/styledComponents.js","components/add/TimerSpecificEditBlocks.js","components/add/EditBlock.js","views/AddView.js","App.js","index.js"],"names":["Wrapper","styled","div","Container","Title","RenderComponent","Documentation","table","DocumentComponent","this","props","title","component","propDocs","map","doc","prop","description","type","defaultValue","React","Component","sizeMapping","small","medium","large","Dot","span","size","color","DotGroup","Loading","propSize","defaultProps","colorTokens","PropTypes","oneOf","bool","oneOfType","string","number","arrayOf","node","func","themeColors","btnPrimary","btnPrimaryHover","btnSecondary","btnSecondaryHover","btnDanger","btnDangerHover","btnDisabled","inputBackground","inputPlaceholder","textLight","textMedium","textDark","timerSwitchTitle","timerSwitchTitleActive","timerSelectorGradient1","timerSelectorGradient2","timerBgGradient1","timerBgGradient2","H1","ButtonSpacer","BaseButton","button","ButtonPrimary","ButtonSecondary","ButtonDanger","Button","children","variant","passProps","disabled","transformTimeUnitToDisplayString","timeUnit","Error","numString","toString","length","prepareTimeForJSDateConvert","time","newTime","i","push","isTimeABeforeTimeB","timeA","timeB","includeEquals","dateA","Date","join","dateB","multiplyTimerByValue","thisTimer","value","total","addTimers","timerA","timerB","hoursA","minutesA","secondsA","sec","hours","Math","floor","convertSecondsToHours","totalSecInHours","mins","convertSecondsToMinutes","totalSecInMinutes","displayTimeString","minutes","seconds","HiddenLabel","label","StyledInput","input","Input","name","onChange","placeholder","min","max","e","target","eventVal","adjustedValue","Number","toFixed","Time","DisplayTime","id","RoundsLabel","Rounds","DisplayRounds","currRound","totalRounds","isRest","ImageBackgroundPane","InnerPane","Panel","TimeInputLabel","TimeInputWrapper","TimeInput","hoursVal","minutesVal","secondsVal","useInterval","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","usePersistedState","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","setItem","stringify","usePersistedReducer","createPersistedReducer","Stopwatch","useContext","AppContext","timerIdx","routineState","currRoutineStep","isTimerRunning","tickUp","handleSetEndTime","endTime","uuid","endHours","endMinutes","endSeconds","noEndTimeInputted","noTimeOnClock","timerAtEnd","endTimeEarlierThanStartTime","lastTimerInList","disableResume","disableReset","disableStart","startDisabled","hideResume","hideReset","resumeDisabled","Countdown","setTimer","hasStarted","handleSetStartTime","tickDown","timerComplete","startTime","startHours","startMinutes","startSeconds","noStartTimeInputted","XY","roundComplete","numRounds","atEndOfRound","LessMarginH1","Tabata","isWorkTime","handleSetWorkTime","handleSetRestTime","tabataRoundComplete","workTime","restTime","workHours","workMinutes","workSeconds","restHours","restMinutes","restSeconds","noWorkTimeInputted","noRestTimeInputted","emptyTimer","timerTypes","timerToJSX","C","nullFx","reducer","state","action","indexToChange","propName","newValue","newState","initialState","isIncrementing","stateWithId","uuidv4","filter","timer","indexToRemove","updated","keysForNewType","getKeysToAddOnChangeType","timerType","createContext","AppProvider","dispatch","setTimerIdx","setTimerHasStarted","setTimerRunning","setCurrRound","setIsWorkTime","useSound","timerEndSound","playTimerEnd","roundEndSound","playRoundEnd","restStartSound","playRestStart","switchToNextTimer","handleStop","alert","handleSetTimeInput","timeType","inputHours","inputMinutes","inputSeconds","valInt","parseInt","handleChangeNumRounds","useCallback","num","numInt","isNaN","resetTimer","idx","timeToResetTo","restartRoutine","newTimerIdx","computeRoutineStepTime","stepTime","totalRestTime","totalWorkTime","checkForInvalidRoundTimes","isTabata","Provider","handleReset","handleResume","idxToChange","handleSkipToEnd","handleStart","onCompleteCallback","endOfMinute","computeTotalRoutineTime","totalTime","thisStepTime","deleteTimerFromRoutine","ButtonIconHolderRow","TimerControls","stopDisabled","resetDisabled","resetButton","onClick","icon","faSync","faStop","faFastForward","faPlay","inputValue","setInputValue","Timers","BottomPanel","RoutinePane","TimerTitle","hasTimerStarted","ActiveTimerTitle","TimerSubtitle","App","to","CustomDiv","justifyContent","alignItems","width","flexDirection","marginTop","marginBottom","marginLeft","marginRight","paddingTop","paddingBottom","paddingLeft","paddingRight","backgroundColor","Scrollable","Dropdown","select","StopwatchEditBlock","index","CountdownEditBlock","TabataEditBlock","XYEditBlock","EditBlock","blockToRender","faTrash","AddView","faArrowLeft","faPlus","Nav","ul","NavItem","li","ViewCenterer","path","DocumentationView","TimersView","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67ecce31.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  border: 1px solid #121212;\n  margin: 20px 0px;\n`;\n\nconst Container = styled.div`\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Title = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 20px;\n  font-size: 1.3rem;\n  font-family: BubblegumSans;\n`;\n\nconst RenderComponent = styled.div`\n  padding: 25px;\n  display: flex;\n  align-items: center;\n`;\n\nconst Documentation = styled.table``;\n\nclass DocumentComponent extends React.Component {\n  render() {\n    return (\n      <Wrapper>\n        <Title>{this.props.title}</Title>\n        <Container>\n          <RenderComponent>{this.props.component}</RenderComponent>\n          <Documentation>\n            <tbody>\n              <tr>\n                <th>Prop</th>\n                <th>Description</th>\n                <th>Type</th>\n                <th>Default value</th>\n              </tr>\n              {this.props.propDocs.map((doc) => {\n                return (\n                  <tr key={doc.prop}>\n                    <td>{doc.prop}</td>\n                    <td>{doc.description}</td>\n                    <td>{doc.type}</td>\n                    <td>\n                      <code>{doc.defaultValue}</code>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Documentation>\n        </Container>\n      </Wrapper>\n    );\n  }\n}\n\nexport default DocumentComponent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst primaryColor = \"#ffa2bf\";\n\nconst sizeMapping = {\n  small: 10,\n  medium: 14,\n  large: 20,\n};\n\nconst Container = styled.div`\n  animation: spin 1.5s linear infinite;\n\n  @-moz-keyframes spin {\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst Dot = styled.span`\n  display: block;\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  background-color: ${(props) => props.color};\n  border-radius: 100%;\n  transform: scale(0.75);\n  transform-origin: 50% 50%;\n  opacity: 0.3;\n  animation: wobble 1s ease-in-out infinite;\n\n  @keyframes wobble {\n    0% {\n      border-radius: 25%;\n    }\n    100% {\n      border-radius: 100%;\n    }\n  }\n`;\n\nconst DotGroup = styled.div`\n  display: flex;\n`;\n\nconst Loading = (props) =>  {\n  const { color, size: propSize } = props;\n  const size = sizeMapping[propSize];\n\n  return (\n    <Container>\n      <DotGroup>\n        <Dot size={size} color={color} />\n        <Dot size={size} color={color} />\n      </DotGroup>\n      <DotGroup>\n        <Dot size={size} color={color} />\n        <Dot size={size} color={color} />\n      </DotGroup>\n    </Container>\n  );\n}\n\nLoading.propTypes = {\n  size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\n  color: PropTypes.string,\n};\n\nLoading.defaultProps = {\n  size: \"medium\",\n  color: primaryColor,\n};\n\nexport default Loading;\n","import styled from \"styled-components\";\n\n/**\n * This page consists of a bunch of design tokens like colors and typography choices\n * that will be propagated across and reused throughout the app. Individual tokens may\n * be used in various places throughout the app, so this is a centralized place\n * for quickly editing and \"remixing\" them. If I had more typography, I'd build out\n * a separate list of typography tokens, and then use those to build out some re-usable\n * styled components for each major typography element. In that case I might also make\n * more use of props to pass more information into a typography component re: styling.\n */\n\n// Raw color values (HEX)\nexport const colorTokens = {\n    babyBlueLight: \"#61cbf5\", \n    babyBlue: \"#459Fd3\",\n    pinkLight: \"#E16BBD\",\n    pinkDarker: \"#B64995\",\n    redLight: \"#D34545\",\n    redDarker: \"#A42323\",\n    tealLight: \"#45D3AD\",\n    tealDarker: \"#419786\",\n    white: \"#FFFFFF\",\n    purpleLight: \"#617cb7\",\n    purpleMedium: \"#2b3254\",\n    lightGray: \"#DDDDDD\",\n};\n\n// Raw color values w/transparency (RGBA)\nexport const specialColorTokens = {\n    babyBlueLight: \"rgba(143,229,255,0.9)\",\n    purpleMedium: \"rgba(0,20,168,0.8)\"\n}\n\n// Values used across components for styling of specific areas & components\nexport const themeColors = {\n    // Buttons\n    btnPrimary: colorTokens.tealLight,\n    btnPrimaryHover: colorTokens.tealDarker,\n    btnSecondary: colorTokens.pinkLight,\n    btnSecondaryHover: colorTokens.pinkDarker,\n    btnDanger: colorTokens.redLight,\n    btnDangerHover: colorTokens.redDarker,\n    btnDisabled: colorTokens.lightGray,\n    // Inputs\n    inputBackground: colorTokens.white,\n    inputPlaceholder: colorTokens.babyBlue,\n    // Text\n    textLight: colorTokens.white,\n    textMedium: colorTokens.babyBlue,\n    textDark: colorTokens.purpleMedium,\n    // Timer Switcher\n    timerSwitchTitle: colorTokens.purpleMedium,\n    timerSwitchTitleActive: colorTokens.babyBlueLight,\n    timerSelectorGradient1: colorTokens.purpleLight,\n    timerSelectorGradient2: colorTokens.purpleMedium,\n    // Timer Background\n    timerBgGradient1: specialColorTokens.babyBlueLight,\n    timerBgGradient2: specialColorTokens.purpleMedium\n};\n\n// Shared Basic Typography Styles\nexport const H1 = styled.div`\n    font-family: Lobster;\n    font-size: 2rem;\n    text-align: center;\n`;","import PropTypes from \"prop-types\";\n\n/**\n * A centralized collection of all of the prop types used across\n * the project.\n */\n\nexport const globalPropTypes = {\n    // Styling Props\n    variant: PropTypes.oneOf([\"primary\", \"secondary\", \"danger\"]),\n\n    // HTML Attributes\n    buttonType: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\n    disabled: PropTypes.bool,\n    inputType: PropTypes.oneOf([\"text\", \"number\", \"submit\"]),\n    inputValue: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]),\n    placeholder: PropTypes.string,\n    name: PropTypes.string,\n    min: PropTypes.string,\n    max: PropTypes.string,\n    \n    // React Props\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ]),\n\n    // Event Handlers\n    onClick: PropTypes.func,\n    onChange: PropTypes.func,\n\n    // Timer-Specific Props\n    hours: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.oneOf([\"\"])\n    ]),\n    minutes: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.oneOf([\"\"])\n    ]),\n    seconds: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.oneOf([\"\"])\n    ]),\n    totalRounds: PropTypes.number,\n    currRound: PropTypes.number,\n    isRest: PropTypes.bool,\n\n};","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { globalPropTypes } from \"../../utils/globalPropTypes\";\nimport { themeColors } from \"../../utils/tokensAndTheme\";\n\nexport const ButtonSpacer = styled.div`\n    width: 300px;\n    justify-content: space-evenly;\n    display: flex;\n`;\n\nconst BaseButton = styled.button`\n    color: ${themeColors.textLight};\n    border: none;\n    border-radius: 5px;\n    padding: 3px 10px;\n    font-size: 20px;\n    font-weight: 700;\n    font-family: SourceCodePro;\n    :disabled {\n        background-color: ${themeColors.btnDisabled};\n        cursor: not-allowed;\n        :hover {\n            background-color: ${themeColors.btnDisabled};\n        }\n    }\n`;\n\nconst ButtonPrimary = styled(BaseButton)`\n    background-color: ${themeColors.btnPrimary};\n    :hover {\n        background-color: ${themeColors.btnPrimaryHover};\n    }\n`;\n\nconst ButtonSecondary = styled(BaseButton)`\n    background-color: ${themeColors.btnSecondary};\n    :hover {\n        background-color: ${themeColors.btnSecondaryHover};\n    }\n`;\n\nconst ButtonDanger = styled(BaseButton)`\n    background-color: ${themeColors.btnDanger};\n    :hover {\n        background-color: ${themeColors.btnDangerHover};\n    }\n`;\n\nconst Button = (props) => {\n    const { children, variant, ...passProps } = props;\n\n    switch(variant) {\n        case \"secondary\":\n            return (\n                <ButtonSecondary {...passProps}>{children}</ButtonSecondary>\n            );\n        case \"danger\": \n            return (\n                <ButtonDanger {...passProps}>{children}</ButtonDanger>\n            );\n        case \"primary\":\n        default: \n            return (\n                <ButtonPrimary {...passProps}>{children}</ButtonPrimary>\n            );\n    }\n}\nButton.propTypes = {\n    variant: globalPropTypes.variant,\n    type: globalPropTypes.buttonType,\n    disabled: globalPropTypes.disabled,\n    children: globalPropTypes.children,\n    onClick: globalPropTypes.onClick.isRequired,\n}\nButton.defaultProps = {\n    type: \"button\",\n    disabled: false,\n    variant: \"primary\",\n    children: \"Click me\"\n}\n\nexport default Button;\n","/**\n * Various functions for dealing with time that don't require state.\n * Note: hooks are in customReactHooks.js instead.\n */\n\n/**\n * Does some validation and transforms to 2 digit display string; throws error on invalid\n * @param {Number} number\n * @param {String} timeUnit\n * @returns {String} 2-digit representation of the number\n */\nexport const transformTimeUnitToDisplayString = (number, timeUnit) =>  {\n    if ( // quick validity check\n        (number < 0) ||\n        (timeUnit === \"minutes\" && number > 60) ||\n        (timeUnit === \"seconds\" && number > 60)\n    ) {\n        throw new Error (\"invalid value for time segment\");\n    }\n    \n    let numString = number.toString();\n\n    if (numString.length < 2) {\n      numString = \"0\" + numString;\n    }\n    return numString;\n  }\n\nconst prepareTimeForJSDateConvert = (time) => {\n  const newTime = [];\n  for (let i = 0; i < time.length; i++) {\n    switch(i) {\n      case 0: \n        newTime.push(transformTimeUnitToDisplayString(time[i], \"hours\"));\n        break;\n      case 1:\n        newTime.push(transformTimeUnitToDisplayString(time[i], \"minutes\"));\n        break;\n      case 2:\n        newTime.push(transformTimeUnitToDisplayString(time[i], \"seconds\"));\n        break\n      default:\n        throw new Error(\"Cannot prepare date for convert; time may have greater length than expected.\");\n    }\n  }\n  return newTime;\n}\n\nexport const isTimeABeforeTimeB = (timeA, timeB, includeEquals) => {\n  // Convert the array times into a JS string that can be used in JS DateTime\n  const dateA = new Date(\"01/01/2021 \" + prepareTimeForJSDateConvert(timeA).join(\":\") + \" PM\");\n  const dateB = new Date(\"01/01/2021 \" + prepareTimeForJSDateConvert(timeB).join(\":\") + \" PM\");\n  \n  // Lower time since epoch (in milliseconds) = earlier time\n  if (includeEquals) {\n    return dateA <= dateB;\n  }\n  return dateA < dateB;\n}\n\nexport const convertSecondsToHours = (sec) => {\n  const hours = Math.floor(sec / (60 * 60));\n  const leftovers = sec - (hours * 60 * 60);\n  return [hours, leftovers];\n}\n\nexport const convertSecondsToMinutes = (sec) => {\n  const mins = Math.floor(sec / 60);\n  const leftovers = sec - (mins * 60);\n  return [mins, leftovers];\n}\n\nexport const multiplyTimerByValue = (thisTimer, value) => {\n  let total;\n  for (let i = 1; i <= value; i++) {\n    if (i === 1) {\n      total = [...thisTimer];\n    } else {\n      total = addTimers(total, [...thisTimer]);\n    }\n  }\n  return total;\n}\n\nexport const addTimers = (timerA, timerB) => {\n  const { 0: hoursA, 1: minutesA, 2: secondsA } = timerA || [];\n  const { 0: hoursB, 1: minutesB, 2: secondsB } = timerB || [];\n  \n  // convert everything to seconds\n  const totalHoursInSec = ((hoursA || 0) + (hoursB || 0)) * 3600;\n  const totalMinutesInSec = ((minutesA || 0) + (minutesB || 0)) * 60;\n  const totalSec = totalHoursInSec + totalMinutesInSec + (secondsA || 0) + (secondsB || 0);\n\n  // convert back\n  const { 0: totalSecInHours = 0, 1: remainderFromHours = 0 } = convertSecondsToHours(totalSec);\n  const { 0: totalSecInMinutes = 0, 1: remainderFromMinutes = 0 } = convertSecondsToMinutes(remainderFromHours);\n  return [totalSecInHours, totalSecInMinutes, remainderFromMinutes];\n}\n\nexport const displayTimeString = (time) => {\n  const { 0: hours, 1: minutes, 2: seconds } = time || [];\n  return `Hours: ${hours || 0}, Minutes: ${minutes || 0}, Seconds: ${seconds || 0}`;\n}\n\n/** \n * DEPRECATED/UNUSED: These helpers are leftover from a previous attempt to use Javascript\n * DateTime for the timers (apparently more accurate to do it this way than simple interval)\n * -- due to complexity, this has been tabled. Keeping these here in case they become useful.\n*/\nexport const convertMillisecToSec = (ms) => {\n  return ms / 1000;\n}\n\nexport const convertHoursToSeconds = (hours) => {\n  const seconds = hours * (60 * 60);\n  return seconds;\n}\n\nexport const convertMinutesToSeconds = (minutes) => {\n  const seconds = minutes * 60;\n  return seconds;\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport { themeColors } from \"../../utils/tokensAndTheme\";\nimport { globalPropTypes } from \"../../utils/globalPropTypes\";\nimport { transformTimeUnitToDisplayString } from \"../../utils/helpers\";\n\nconst HiddenLabel = styled.label`display:none;`;\n\nconst StyledInput = styled.input`\n    background-color: ${themeColors.inputBackground};\n    border: none;\n    width: 50px;\n    padding: 5px;\n    border-radius: 3px;\n    font-family: SourceCodePro;\n\n    ::placeholder {\n        color: ${themeColors.inputPlaceholder};\n        font-size: 20px;\n    }\n`;\n\nconst Input = (props) => {\n    const { type, name, onChange, disabled, placeholder, value, min, max } = props;\n\n    // Adds some additional validation for typed numbers\n    const validateChange = (e) => {\n        let { target: { value: eventVal, min, max } = {} } = e || {};\n        if (type === \"number\") { // ensure typed numerical values don't overflow min/max or include decimals\n            const adjustedValue = (Math.max(Number(min), Math.min(Number(max), Number(eventVal)))).toFixed(0);\n            e.target[\"value\"] = transformTimeUnitToDisplayString(adjustedValue);\n            onChange(e);\n        } else {\n            // Note: additional validation for numRounds handled in context\n            onChange(eventVal);\n        }\n    };\n\n    return (\n        <>\n            <HiddenLabel {...{ name }} ></HiddenLabel>\n            <StyledInput onChange={validateChange} {...{ name, type, disabled, placeholder, value, min, max }} />\n        </>\n    );\n}\nInput.propTypes = {\n    name: globalPropTypes.name.isRequired,\n    onChange: globalPropTypes.onChange.isRequired,\n    disabled: globalPropTypes.disabled,\n    placeholder: globalPropTypes.placeholder,\n    type: globalPropTypes.inputType,\n    value: globalPropTypes.inputValue,\n    min: globalPropTypes.min,\n    max: globalPropTypes.max,\n}\nInput.defaultProps = {\n    type: \"text\",\n    disabled: false,\n    value: \"\",\n    placeholder: \"Enter text here...\"\n}\n\nexport default Input;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { transformTimeUnitToDisplayString } from \"../../utils/helpers\";\nimport { globalPropTypes } from \"../../utils/globalPropTypes\";\n\nconst Time = styled.div`\n    font-size: 4em;\n    font-family: 'SourceCodePro';\n`;\n\nconst DisplayTime = (props) => {\n    const { hours, minutes, seconds } = props;\n    return (\n        <Time id=\"display-time\">\n            {transformTimeUnitToDisplayString(hours || 0, \"h\")}:\n            {transformTimeUnitToDisplayString(minutes || 0, \"m\")}:\n            {transformTimeUnitToDisplayString(seconds|| 0, \"s\")}\n        </Time>\n    );\n}\nDisplayTime.propTypes = {\n    hours: globalPropTypes.hours,\n    minutes: globalPropTypes.minutes,\n    seconds: globalPropTypes.seconds\n}\nDisplayTime.defaultProps = {\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n}\n\nexport default DisplayTime;","import React from \"react\";\nimport styled from \"styled-components\";\nimport { globalPropTypes } from \"../../utils/globalPropTypes\";\n\nexport const RoundsLabel = styled.div`\n  font-family: BubblegumSans;\n  padding-bottom: 15px;\n  padding-top: 10px;\n`;\n\nconst Rounds = styled.div`\n  font-size: 25px;\n  text-align: center;\n  font-family: BubblegumSans;\n`;\n\nconst DisplayRounds = (props) => {\n  const { currRound, totalRounds, isRest } = props;\n  return (\n    <Rounds>\n        (Round: {currRound}\n        {totalRounds > 0 && <span> of {totalRounds}</span>}\n        { isRest && <span> - Rest</span>})\n    </Rounds>\n  );\n}\nDisplayRounds.propTypes = {\n    totalRounds: globalPropTypes.totalRounds,\n    currRound: globalPropTypes.currRound,\n    isRest: globalPropTypes.isRest\n}\nDisplayRounds.defaultProps = {\n    totalRounds: 0,\n    currRound: 0,\n    isRest: false\n}\n\nexport default DisplayRounds;","import React from \"react\";\nimport styled from \"styled-components\";\nimport { themeColors } from \"./../../utils/tokensAndTheme\";\nimport { globalPropTypes } from \"../../utils/globalPropTypes\";\n\nconst ImageBackgroundPane = styled.div`\n    background: linear-gradient(120deg, ${themeColors.timerBgGradient1}, ${themeColors.timerBgGradient2}), url('/assignment-3-Bianca-Morris/maarten-van-den-heuvel-unsplash-sm.jpg');\n    height: 390px;\n    width: 550px;\n    border-radius: 0 20px 20px 0;\n    padding: 15px 20px 5px 20px;\n    background-position: center;\n    background-size: cover;\n`;\n\nconst InnerPane = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    flex-shrink: 0;\n    border-radius: 20px;\n    border: 4px dotted #FFFFFF;\n    height: 380px;\n    width: 100%;\n    color: ${themeColors.textLight};\n`;\n\n\nconst Panel = (props) => {\n    const { children } = props;\n    return (\n        <ImageBackgroundPane>\n            <InnerPane>\n            { children }\n            </InnerPane>  \n        </ImageBackgroundPane>\n    );   \n}\nPanel.propTypes = {\n    children: globalPropTypes.children.isRequired,\n}\n\nexport default Panel;","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { globalPropTypes } from \"../../utils/globalPropTypes\";\nimport Input from \"../generic/Input\";\n\nexport const TimeInputLabel = styled.div`\n  display: flex;\n  align-items: center;\n  font-family: BubblegumSans;\n  width: 100%;\n  justify-content: center;\n`;\n\nconst TimeInputWrapper = styled.div`\n    display: flex;\n    width: 200px;\n    justify-content: space-between;\n    margin: 10px 5px;\n`;\n\nconst TimeInput = (props) => {\n    const { disabled, hoursVal, minutesVal, secondsVal, onChange } = props;\n    return (\n        <TimeInputWrapper>\n            <Input placeholder=\"HH\" value={hoursVal} type=\"number\" name=\"hourInput\" min=\"0\" max=\"24\" {...{ disabled, onChange }} />\n            <Input placeholder=\"MM\" value={minutesVal} type=\"number\" name=\"minuteInput\" min=\"0\" max=\"59\" {...{ disabled, onChange }} />\n            <Input placeholder=\"SS\" value={secondsVal} type=\"number\" name=\"secondInput\" min=\"0\" max=\"59\" {...{ disabled, onChange }} />\n        </TimeInputWrapper>\n    )\n}\nTimeInput.propTypes = {\n    hoursVal: globalPropTypes.hours,\n    minutesVal: globalPropTypes.minutes,\n    secondsVal: globalPropTypes.seconds,\n    onChange: globalPropTypes.onChange.isRequired,\n    disabled: globalPropTypes.disabled\n}\nTimeInput.defaultProps = {\n    disabled: false,\n    hoursVal: 0,\n    minutesVal: 0,\n    secondsVal: 0\n}\n\nexport default TimeInput;\n","export default __webpack_public_path__ + \"static/media/alarm.0ac31e5c.wav\";","export default __webpack_public_path__ + \"static/media/restStart.54f09e8a.wav\";","export default __webpack_public_path__ + \"static/media/roundEnd.a673b70c.wav\";","import { useState, useEffect, useRef } from \"react\";\nimport createPersistedReducer from 'use-persisted-reducer';\n\n/**\n * Borrowed from an example on Overreacted.io\n * https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n */\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest function.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\n/**\n * Borrowed from https://github.com/prof-tejera/react7/blob/main/src/hooks.js\n */\nexport const usePersistedState = (key, initialValue) => {\n\n  // Loads the previously stored value from local storage, and if not present creates one\n  // with initialValue\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Read initial value from local storage or fallback to the given initial value\n      const item = window.localStorage.getItem(key);\n      // console.log(\"item from localStorage\", item);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Updates app state and local storage with new value\n  const setValue = value => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n};\n\nexport const usePersistedReducer = createPersistedReducer('routineState');","import React, { useContext } from \"react\";\n\nimport { AppContext } from \"../../context/AppProvider\";\nimport { useInterval } from \"../../utils/customReactHooks\";\nimport { isTimeABeforeTimeB } from \"../../utils/helpers\";\n\nimport { H1 } from \"../../utils/tokensAndTheme\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport TimeInput, { TimeInputLabel } from \"../generic/TimeInput\";\nimport TimerControls from \"../generic/TimerControls\";\n\n/**\n * A timer that counts up to endTime amount of time (e.g. count up to 2 minutes and 30 seconds, starting at 0)\n */\nconst Stopwatch = (props) =>  {\n  const {\n    timerIdx,\n    routineState,\n    currRoutineStep,\n    minutes,\n    seconds,\n    hours,\n    isTimerRunning,\n    tickUp,\n    handleSetEndTime,\n  } = useContext(AppContext);\n\n  const { endTime, uuid } = currRoutineStep;\n  const { 0: endHours, 1: endMinutes, 2: endSeconds } = endTime || [];\n\n  // Set some constraints to avoid strange state combos\n  const noEndTimeInputted = !endHours && !endMinutes && !endSeconds;\n  const noTimeOnClock = !hours && !minutes && !seconds;\n  const timerAtEnd = ((hours || 0) === (endHours || 0)) && ((minutes || 0) === (endMinutes || 0)) && ((seconds || 0) === (endSeconds || 0));\n  const endTimeEarlierThanStartTime = isTimeABeforeTimeB(endTime, [hours, minutes, seconds], true);\n  const lastTimerInList = timerIdx === routineState.length - 1;\n\n  const disableResume = timerAtEnd && lastTimerInList;\n  const disableReset = noEndTimeInputted && noTimeOnClock;\n  const disableStart = noEndTimeInputted || endTimeEarlierThanStartTime;\n  \n  useInterval(() => {\n    tickUp();\n  }, isTimerRunning ? 1000 : null);\n\n  return (\n    <div id={\"stopwatch-\" + uuid}>\n      <H1>Stopwatch</H1>\n      <DisplayTime {...{ hours, minutes, seconds }} />\n      <TimeInputLabel>\n        End Time: \n        <TimeInput disabled hoursVal={endHours} minutesVal={endMinutes} secondsVal={endSeconds} onChange={handleSetEndTime} />\n      </TimeInputLabel>\n      <TimerControls startDisabled={disableStart} hideResume={disableResume} hideReset={disableReset} resumeDisabled={disableStart} />\n    </div>\n  );\n}\n\nexport default Stopwatch;\n","import React, { useContext, useEffect } from \"react\";\n\nimport { AppContext } from \"../../context/AppProvider\";\nimport { useInterval } from \"../../utils/customReactHooks\";\nimport { isTimeABeforeTimeB } from \"../../utils/helpers\";\n\nimport { H1 } from \"../../utils/tokensAndTheme\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport TimeInput, { TimeInputLabel } from \"../generic/TimeInput\";\nimport TimerControls from \"../generic/TimerControls\";\n\n/**\n * A timer that counts up to startTime amount of time (e.g. count up to 2 minutes and 30 seconds, starting at 0).\n */\nconst Countdown = (props) => {\n  const {\n    setTimer,\n    hasStarted,\n    timerIdx,\n    routineState,\n    currRoutineStep,\n    hours,\n    minutes,\n    seconds,\n    isTimerRunning,\n    handleSetStartTime,\n    tickDown,\n    timerComplete,\n  } = useContext(AppContext);\n\n  const { startTime, uuid } = currRoutineStep;\n  const { 0: startHours, 1: startMinutes, 2: startSeconds } = startTime || [];\n\n  // Set some constraints to avoid strange state combos\n  const noTimeOnClock = !hours && !minutes && !seconds;\n  const lastTimerInList = timerIdx === routineState.length - 1;\n  const noStartTimeInputted = !startHours && !startMinutes && !startSeconds;\n  const startTimeEarlierThanCurrTime = isTimeABeforeTimeB(startTime, [hours, minutes, seconds], false);\n\n  const disableResume = startTimeEarlierThanCurrTime || (noTimeOnClock && lastTimerInList);\n\n  useInterval(() => {\n    tickDown(timerComplete);\n  }, isTimerRunning ? 1000 : null);\n\n  useEffect(() => { // Should only run once... when setting up timer, before starting\n    if (!hasStarted && timerIdx === 0 && noTimeOnClock) {\n      setTimer(startTime);\n    }\n  }, [hasStarted, timerIdx, noTimeOnClock, startTime, setTimer]);\n\n  return (\n    <div id={\"countdown-\" + uuid}>\n      <H1>Countdown</H1>\n      <DisplayTime {...{ hours, minutes, seconds }} />\n      <TimeInputLabel>\n        Start Time:\n        <TimeInput disabled hoursVal={startHours} minutesVal={startMinutes} secondsVal={startSeconds} onChange={handleSetStartTime} />\n      </TimeInputLabel>\n      <TimerControls startDisabled={noStartTimeInputted} hideResume={disableResume} />\n    </div>\n  );\n}\n\nexport default Countdown;\n","import React, { useContext, useEffect } from \"react\";\n\nimport { AppContext } from \"../../context/AppProvider\";\nimport { useInterval } from \"../../utils/customReactHooks\";\n\nimport { H1 } from \"../../utils/tokensAndTheme\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport DisplayRounds from \"../generic/DisplayRounds\";\nimport TimeInput, { TimeInputLabel } from \"../generic/TimeInput\";\nimport TimerControls from \"../generic/TimerControls\";\nimport { isTimeABeforeTimeB } from \"../../utils/helpers\";\n\n/**\n * A timer that counts down from starTime per round, for numRounds number of rounds\n * (e.g. 1 minute for 10 minutes would count down from 1 minute to 0, then start another countdown, etc, 10 times)\n */\nconst XY = (props) => {\n  const {\n    hasStarted,\n    setTimer,\n    routineState,\n    timerIdx,\n    currRoutineStep,\n    hours,\n    minutes,\n    seconds,\n    isTimerRunning,\n    handleSetStartTime,\n    tickDown,\n    currRound,\n    roundComplete,\n  } = useContext(AppContext);\n\n  const { startTime, numRounds, uuid } = currRoutineStep;\n  const { 0: startHours, 1: startMinutes, 2: startSeconds } = startTime || [];\n  \n  // Set some constraints to avoid strange state combos\n  const noStartTimeInputted = !startHours && !startMinutes && !startSeconds;\n  const noTimeOnClock = !hours && !minutes && !seconds;\n  const lastTimerInList = timerIdx === routineState.length - 1;\n  const atEndOfRound = (numRounds === currRound) && noTimeOnClock;\n  const startTimeEarlierThanCurrTime = isTimeABeforeTimeB(startTime, [hours, minutes, seconds], false);\n\n  const disableResume = startTimeEarlierThanCurrTime || (noTimeOnClock && lastTimerInList && atEndOfRound);\n\n  useInterval(() => {\n    tickDown(roundComplete);\n  }, isTimerRunning ? 1000 : null);\n\n  useEffect(() => { // Should only run once... when setting up timer, before starting\n    if (!hasStarted && timerIdx === 0 && noTimeOnClock && currRound === 1) {\n      setTimer(startTime);\n    }\n  }, [hasStarted, timerIdx, noTimeOnClock, startTime, setTimer, currRound]);\n\n  return (\n    <div id={\"xy-\" + uuid}>\n      <H1>XY</H1>\n      <DisplayRounds {...{ currRound }} totalRounds={numRounds}/>\n      <DisplayTime {...{ hours, minutes, seconds }} />\n      <TimeInputLabel>\n        Start Time:\n        <TimeInput disabled hoursVal={startHours} minutesVal={startMinutes} secondsVal={startSeconds} onChange={handleSetStartTime}/>\n      </TimeInputLabel>\n      <TimerControls startDisabled={noStartTimeInputted} hideResume={disableResume} />\n    </div>\n  );\n}\n\nexport default XY;\n","import React, { useContext, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nimport { AppContext } from \"../../context/AppProvider\";\nimport { useInterval } from \"../../utils/customReactHooks\";\n\nimport { H1 } from \"../../utils/tokensAndTheme\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport DisplayRounds from \"../generic/DisplayRounds\";\nimport TimeInput, { TimeInputLabel } from \"../generic/TimeInput\";\nimport TimerControls from \"../generic/TimerControls\";\nimport { isTimeABeforeTimeB } from \"../../utils/helpers\";\n\nconst LessMarginH1 = styled(H1)`\n  margin: 5px;\n`;\n\n/**\n * An interval timer with work/rest periods. \n * Eg: 20s/10s, 8 rounds, would count down from 20 seconds to 0, then count down from 10 seconds to 0, then from 20, then from 10, etc, for 8 rounds.\n * A full round includes both the work and rest. In this case, 20+10=30 seconds per round.\n */\nconst Tabata = (props) => {\n  const {\n    routineState,\n    hasStarted,\n    timerIdx,\n    setTimer,\n    currRoutineStep,\n    hours,\n    minutes,\n    seconds,\n    isTimerRunning,\n    isWorkTime,\n    handleSetWorkTime,\n    handleSetRestTime,\n    tickDown,\n    currRound,\n    tabataRoundComplete\n  } = useContext(AppContext);\n\n  const { workTime, restTime, numRounds, uuid } = currRoutineStep;\n  const { 0: workHours, 1: workMinutes, 2: workSeconds } = workTime || [];\n  const { 0: restHours, 1: restMinutes, 2: restSeconds } = restTime || [];\n\n  // Set some constraints to avoid strange state combos\n  const noTimeOnClock = (!hours && !minutes && !seconds);\n  const noWorkTimeInputted = !workHours && !workMinutes && !workSeconds;\n  const noRestTimeInputted = !restHours && !restMinutes && !restSeconds;\n  const lastTimerInList = timerIdx === routineState.length - 1;\n  const atEndOfRound = (numRounds === currRound) && noTimeOnClock && !isWorkTime;\n  const startTimeEarlierThanCurrTime = isTimeABeforeTimeB(isWorkTime ? workTime: restTime, [hours, minutes, seconds]);\n\n  const startDisabled = (noWorkTimeInputted && noRestTimeInputted); // allow to start as long as work or rest is present\n  const disableResume = startTimeEarlierThanCurrTime || (noTimeOnClock && lastTimerInList && atEndOfRound);\n\n  useInterval(() => {\n    tickDown(tabataRoundComplete);\n  }, isTimerRunning ? 1000 : null);\n\n  useEffect(() => { // Should only run once... when setting up timer, before starting\n    if (!hasStarted && timerIdx === 0 && noTimeOnClock && currRound === 1 && isWorkTime) {\n      setTimer(workTime);\n    }\n  }, [hasStarted, timerIdx, noTimeOnClock, workTime, setTimer, currRound, isWorkTime]);\n\n  return (\n    <div id={\"tabata-\" + uuid}>\n      <LessMarginH1>Tabata</LessMarginH1>\n      <DisplayRounds {...{ currRound }} totalRounds={numRounds} isRest={!isWorkTime}/>\n      <DisplayTime {...{ hours, minutes, seconds }}/>\n      <TimeInputLabel>\n        Work Time:\n        <TimeInput disabled onChange={handleSetWorkTime} hoursVal={workHours} minutesVal={workMinutes} secondsVal={workSeconds} />\n      </TimeInputLabel>\n      <TimeInputLabel>\n        Rest Time:\n        <TimeInput disabled onChange={handleSetRestTime} hoursVal={restHours} minutesVal={restMinutes} secondsVal={restSeconds}/>\n      </TimeInputLabel>\n      <TimerControls {...{ startDisabled }}  hideResume={disableResume}/>\n    </div>\n  );\n}\n\nexport default Tabata;\n","import Stopwatch from \"../components/timers/Stopwatch\";\nimport Countdown from \"../components/timers/Countdown\";\nimport XY from \"../components/timers/XY\";\nimport Tabata from \"../components/timers/Tabata\";\n\nexport const emptyTimer = [\"\", \"\", \"\"]; // [Hours, Minutes, Seconds]\n\nexport const timerTypes = [\"Stopwatch\", \"Countdown\", \"Tabata\", \"XY\"];\n\nexport const timerToJSX = {\n    \"Stopwatch\": { C: <Stopwatch /> },\n    \"Countdown\": { C: <Countdown /> },\n    \"XY\": { C: <XY /> },\n    \"Tabata\": { C: <Tabata /> },\n};\n\nexport const nullFx = () => null;","import { v4 as uuidv4 } from 'uuid';\nimport { emptyTimer } from \"../../utils/constants\";\n\n/**\n * Controls the routine state\n * @param {Array} state - a queue of objects representing steps in a routine, and containing timer-specific info (type, numRounds, etc.)\n * @param {Object} action - an object containing information about what type of update to make to the routine state\n * @returns {Object} new, updated state object\n */\nexport const reducer = (state, action) => {\n    const { indexToChange, propName, newValue } = action;\n    const newState = [];\n\n    switch(action.type) {\n        case 'addTimer':\n            const initialState = { type: \"Stopwatch\", isIncrementing: true, numRounds: 1, endTime: emptyTimer };\n            const stateWithId = {...initialState, uuid: uuidv4()};\n            return [...state, stateWithId ];\n        case 'removeTimer':\n            return state.filter((timer, i) => i !== action.indexToRemove);\n        case 'clearAll':\n            return [];\n        case 'changePropVal':\n            for (let i=0; i < state.length; i++) {\n                if (i !== indexToChange) {\n                    newState.push(state[i]);\n                } else {\n                    let updated;\n                    if (propName === \"type\") {\n                      // add timer-specific props to state for new timer type (startTime, numRounds, etc.)\n                      const keysForNewType = getKeysToAddOnChangeType(newValue);\n                      updated = {...state[i], ...keysForNewType };\n                    } else {\n                      updated = {...state[i]};\n                    }\n                    updated[propName] = newValue;\n                    newState.push(updated);\n                }\n            }\n            return newState;\n        default:\n            throw new Error(\"Unexpected action passed into reducer.\");\n    }\n}\n\n/**\n * Maps a type of timer to a set of timer-specific keys and values to add to state object when switching timer types\n * @param {String} timerType One of [\"Stopwatch\", \"Countdown\", \"Tabata\", \"XY\"]\n * @returns {Object}\n */\nconst getKeysToAddOnChangeType = (timerType) => {\n    switch(timerType) {\n      case 'Stopwatch':\n        return { endTime: emptyTimer, isIncrementing: true };\n      case 'Countdown':\n        return { startTime: emptyTimer, isIncrementing: false };\n      case 'Tabata':\n        return { workTime: emptyTimer, restTime: emptyTimer, isIncrementing: false };\n      case 'XY':\n        return { startTime: emptyTimer, isIncrementing: false };\n      default:\n        throw new Error(\"Unexpected timerType\");\n    }\n}","import React, { useCallback } from 'react';\nimport useSound from 'use-sound';\n\nimport timerEndSound from '../sfx/alarm.wav';\nimport restStartSound from '../sfx/restStart.wav';\nimport roundEndSound from '../sfx/roundEnd.wav';\nimport { usePersistedState, usePersistedReducer } from '../utils/customReactHooks';\nimport { addTimers, multiplyTimerByValue } from '../utils/helpers';\nimport { reducer } from '../components/reducers/routine';\nimport { emptyTimer } from '../utils/constants';\n\nexport const AppContext = React.createContext({});\n\nconst AppProvider = ({ children }) => {\n  const [ routineState, dispatch ] = usePersistedReducer(reducer, []);\n  const [ timerIdx, setTimerIdx ] = usePersistedState(\"timer-idx\", 0); // Timer from routineState to display\n\n  const currRoutineStep = routineState[timerIdx];\n  const { type, startTime, endTime, restTime, workTime, numRounds, isIncrementing } = currRoutineStep || {};\n\n  // State shared across all timers\n  const [ hasStarted, setTimerHasStarted ] = usePersistedState('has-started', false); \n  const [ timer, setTimer ] = usePersistedState(\"timer\", emptyTimer);\n  const [ isTimerRunning, setTimerRunning ] = usePersistedState(\"is-timer-running\", false);\n\n  // States specific to certain timers\n  const [ currRound, setCurrRound ] = usePersistedState(\"curr-round\", 1); // Used in Tabata and XY\n  const [ isWorkTime, setIsWorkTime ] = usePersistedState(\"is-work-time\", true); // if False, is rest time\n\n  // Sound Hooks\n  const [playTimerEnd] = useSound(timerEndSound);\n  const [playRoundEnd] = useSound(roundEndSound);\n  const [playRestStart] = useSound(restStartSound);\n\n  const { 0: hours, 1: minutes, 2: seconds } = timer || [];\n\n  /* Counting up the seconds from 00:00:00 to endTime */\n  const tickUp = () => {\n    const { 0: endHours, 1: endMinutes, 2: endSeconds } = endTime || [];\n    if (\n      (seconds || 0) === (endSeconds || 0) && \n      (minutes || 0) === (endMinutes || 0) &&\n      (hours || 0) === (endHours || 0)\n    ) {\n      timerComplete();\n    } else {\n      const endOfMinute = seconds === 59;\n      const endOfHour = minutes === 59;\n      \n      if (endOfMinute && endOfHour) { // update hour\n        setTimer([(hours || 0) + 1, 0, 0]);\n      } else if (endOfMinute) { // update minute\n        setTimer([hours, (minutes || 0) + 1, 0]);\n      } else { // update second\n        setTimer([hours, minutes, (seconds || 0) + 1]);\n      }\n    }\n  }\n\n  /* Counting down the seconds from start time to 00:00:00 */\n  const tickDown = (onCompleteCallback) => {\n    if (!hours && !minutes && !seconds) {\n      onCompleteCallback();\n    } else if (!minutes && !seconds) {\n      setTimer([(hours - 1), 59, 59]);\n    } else if (!seconds) {\n      setTimer([hours, (minutes - 1), 59]);\n    } else {\n      setTimer([hours, minutes, (seconds - 1)]);\n    }\n  }\n\n  /** Handles completion of a timer and a routine */\n  const timerComplete = () => {\n    playTimerEnd();\n\n    // Not finished with routine\n    if (timerIdx !== routineState.length - 1) {\n      switchToNextTimer();\n    } else {\n      handleStop();\n      alert('Routine complete!');\n    }\n  }\n\n  /** Handles completion of a single round for XY timers */\n  const roundComplete = () => {\n    if (currRound !== numRounds) {\n      playRoundEnd();\n      // start a new round\n      setTimer(startTime);\n      setCurrRound(currRound + 1);\n    } else {\n      timerComplete();\n    }\n  }\n\n  /** Actions to take on a tabata round complete; kicks over to timerComplete if at end of routine */\n  const tabataRoundComplete = () => {\n    if (!isWorkTime && (currRound === numRounds)) {\n      timerComplete();\n    } else {\n      if (isWorkTime) {\n        playRestStart();\n        setTimer(restTime); // update counter with rest time\n        setIsWorkTime(false); // convert to rest period\n      } else {\n        playRoundEnd();\n        setTimer(workTime); // update counter with work times\n        setIsWorkTime(true); // convert to work period\n        setCurrRound(currRound + 1); // start a new round\n      }\n    }\n  }\n\n  /** Event handlers for various TimeInputs */\n  const handleSetStartTime = (e, idxToChange, startTime) => {\n    handleSetTimeInput(e, idxToChange, startTime, \"startTime\");\n  }\n\n  const handleSetWorkTime = (e, idxToChange, workTime) => {\n    handleSetTimeInput(e, idxToChange, workTime, \"workTime\");\n  }\n\n  const handleSetRestTime = (e, idxToChange, restTime) => {\n    handleSetTimeInput(e, idxToChange, restTime, \"restTime\");\n  }\n\n  const handleSetEndTime = (e, idxToChange, endTime) => {\n    handleSetTimeInput(e, idxToChange, endTime, \"endTime\");\n  }\n\n  const handleSetTimeInput = (e, indexToChange, time, timeType) => {\n    const { target: { value, name } = {} } = e || {};\n    const { 0: inputHours, 1: inputMinutes, 2: inputSeconds } = time || [];\n    const valInt = parseInt(value || 0);\n    const action = {\n      type: \"changePropVal\",\n      propName: timeType,\n      indexToChange,\n    };\n    switch(name) {\n      case \"hourInput\":\n        action.newValue = [valInt, inputMinutes, inputSeconds]\n        break;\n      case \"minuteInput\":\n        action.newValue = [inputHours, valInt, inputSeconds];\n        break;\n      case \"secondInput\":\n        action.newValue = [inputHours, inputMinutes, valInt];\n        break;\n      default:\n        throw new Error(\"Attempting to handle time change for unrecognized input.\");\n    };\n    dispatch(action);\n  }\n\n  /** Event handlers for changing rounds */\n  const handleChangeNumRounds = useCallback((indexToChange, num) => {\n    const numInt = parseInt(num || 0);\n    if (!isNaN(numInt)) {\n      dispatch({\n        type: \"changePropVal\",\n        propName: \"numRounds\",\n        newValue: numInt,\n        indexToChange\n      });\n    }\n  }, [dispatch]);\n\n  /** Other event handlers for interfacing with timer via buttons */\n  const handleStop = (e) => {\n    setTimerRunning(false);\n  }\n\n  const handleStart = (e, idx) => {\n    const { startTime, workTime, restTime } = routineState[idx || timerIdx] || {};\n    if (!hasStarted){\n      setTimerHasStarted(true);\n    }\n    if (!isIncrementing) {\n      if (type === \"XY\" || type === \"Countdown\") {\n        setTimer(startTime);\n      } else { // Tabata\n        if (isWorkTime) {\n          setTimer(workTime);\n        } else {\n          setTimer(restTime);\n        }\n      }\n    } else {\n        setTimer(emptyTimer); // start over from beginning for stopwatch\n    }\n    setTimerRunning(true);\n  }\n\n  const handleResume = (e) => {\n    // if (!isIncrementing) {\n      setTimerRunning(true);\n    // } else {\n      // console.log(\"incrementing\");\n      // handleStart(e);\n    // }\n  }\n\n  /** Allows resetting of the current timer; used primarily as event handler */\n  const handleReset = (e) => {\n    handleStop();\n    resetTimer(timerIdx);\n    setCurrRound(1);\n    setIsWorkTime(true);\n  }\n\n  /** Allows fast-forwarding through a timer's runtime; used primarily as event handler */\n  const handleSkipToEnd = (e) => {\n    if (!isIncrementing) { // XY, Tabata, Countdown\n      setTimer([0, 0, 0]);\n      setCurrRound(numRounds);\n      setIsWorkTime(false);\n    } else { // Stopwatch\n      setTimer(endTime);\n    }\n    timerComplete();\n  }\n\n  /** Sets a timer back to it's starting values, and if it's the first one in routine, resets the hasStarted state */\n  const resetTimer = useCallback((idx) => {\n    const thisTimer = routineState[idx];\n    const { type } = thisTimer;\n    if (type !== \"Stopwatch\") {\n      const mapTimerTypeToReset = {\n        \"Countdown\": \"startTime\",\n        \"XY\": \"startTime\",\n        \"Tabata\": \"workTime\"\n      };\n      const timeToResetTo = thisTimer[mapTimerTypeToReset[type]];\n      setTimer(timeToResetTo);\n    } else {\n      setTimer(emptyTimer);\n    }\n    if (idx === 0) { setTimerHasStarted(false); }\n  }, [routineState, setTimer, setTimerHasStarted]);\n\n  /** Starts the routine over, and clears state from previous runs */\n  const restartRoutine = () => {\n    setTimerRunning(false);\n    if (timerIdx) {setTimerIdx(0); }\n    if (routineState.length > 0) { resetTimer(0); }\n    setCurrRound(1);\n    setIsWorkTime(true);\n    setTimerHasStarted(false);\n  }\n\n  /** Facilitates edits to timerIDX and cleans up state from previous timers */\n  const switchToNextTimer = () => {\n    const newTimerIdx = timerIdx + 1;\n    setTimerIdx(newTimerIdx);\n\n    if (isTimerRunning && routineState.length > 0) {\n      // Update states and trigger next timer\n      setCurrRound(1);\n      setIsWorkTime(true);\n      resetTimer(newTimerIdx);\n    }      \n  }\n\n  /** Deletes timer at passed in index from routine */\n  const deleteTimerFromRoutine = (idx) => {\n    if (!isTimerRunning) {\n      dispatch({ type: \"removeTimer\", indexToRemove: idx })\n    }\n  };\n\n /**\n  * Computes the total time for any individual step in the routine \n  * @param {Number} idx - index of step in routine to calculate time for\n  * @returns {Array} representing a single timer\n  */\n  const computeRoutineStepTime = (idx) => {\n    if (!routineState[idx]) { return emptyTimer };\n    const {\n      type,\n      numRounds = 1,\n      startTime = emptyTimer,\n      workTime = emptyTimer,\n      restTime = emptyTimer,\n      endTime = emptyTimer\n    } = routineState[idx];\n\n    let stepTime;\n    switch(type) {\n      case \"Stopwatch\":\n        stepTime = endTime;\n        break;\n      case \"XY\":\n        stepTime = multiplyTimerByValue(startTime, numRounds);\n        break;\n      case \"Tabata\":\n        const totalRestTime = multiplyTimerByValue(restTime, numRounds);\n        const totalWorkTime = multiplyTimerByValue(workTime, numRounds);\n        stepTime = addTimers(totalRestTime, totalWorkTime);\n        break;\n      case \"Countdown\":\n        stepTime = startTime;\n        break;\n      default: \n        throw new Error(\"Unexpected timer type in computeRoutineStepTime\");\n    }\n    return stepTime;\n  }\n\n  /**\n   * Uses routineState to generate a total time for running the routine\n   * @returns {Array} representing a single timer (total time)\n   */\n  const computeTotalRoutineTime = () => {\n    let totalTime;\n    for (let i = 0; i < routineState.length; i++) {\n      const thisStepTime = computeRoutineStepTime(i);\n      if (i === 0) { \n       totalTime = thisStepTime;\n      } else {\n        totalTime = addTimers(thisStepTime, totalTime);\n      }\n    }\n    return totalTime;\n  }\n\n  /**\n   * Handles some state problems with invalid rounds that can occur when switching between editing and running timers\n   */\n  const checkForInvalidRoundTimes = useCallback(() => {\n    const { type, workTime, startTime } = routineState[timerIdx] || {};\n    const isTabata = type === \"Tabata\";\n    if (isTabata || type === \"XY\") {\n      if (numRounds <= 0) {\n        alert(`Invalid numRounds for Timer (must be >=1). Setting to 1 and re-loading.`)\n        handleChangeNumRounds(timerIdx, 1);\n        if (isTabata) {\n          // also force switch back to work time\n          setTimer(workTime);\n          setIsWorkTime(true);\n        } else {\n          setTimer(startTime);\n        }\n        if (timerIdx === 0) { setTimerHasStarted(false); }\n      } else if (currRound > numRounds) {\n        alert(`Invalid numRounds for Timer @ index (must be <= numRounds). Setting currRound ${currRound} equal to numRounds ${numRounds}.`)\n        // Invalid numRounds for Timer @ index (must be <= totalRounds). Setting to be equal to currentRound.\n        setCurrRound(numRounds);\n        // console.log(`invalid currRound ${currRound} > numRounds ${numRounds}`);\n      }\n    }\n    // valid\n  }, [handleChangeNumRounds, setCurrRound, currRound, numRounds, timerIdx, routineState, setIsWorkTime, setTimer, setTimerHasStarted]);\n\n  /**\n   * Forces auto-Restart routine if end up in a situation where routine state is invalid (should only happen after certain edits to routine)\n   */\n  if (\n    (!currRoutineStep && routineState.length > 0)  // invalid timerIdx\n  ) { \n    // Leftover state from previous run interfering with current run; adjust start index and restart routine\n    restartRoutine();\n  };\n\n  return ( // TODO: This array could probably use some pruning...\n    <AppContext.Provider\n      value={{\n        currRound,\n        setCurrRound,\n        endTime,\n        handleChangeNumRounds,\n        handleReset,\n        handleResume,\n        handleSetEndTime,\n        handleSetRestTime,\n        handleSetStartTime,\n        handleSetWorkTime,\n        handleSkipToEnd,\n        handleStart,\n        handleStop,\n        setTimer,\n        hours,\n        isIncrementing,\n        isTimerRunning,\n        isWorkTime,\n        minutes,\n        numRounds,\n        restTime,\n        roundComplete,\n        seconds,\n        setTimerIdx,\n        startTime,\n        tabataRoundComplete,\n        tickDown,\n        tickUp,\n        timerComplete,\n        hasStarted,\n        timerIdx,\n        workTime,\n        routineState,\n        dispatch,\n        restartRoutine,\n        computeRoutineStepTime,\n        computeTotalRoutineTime,\n        currRoutineStep,\n        deleteTimerFromRoutine,\n        checkForInvalidRoundTimes\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppProvider;","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFastForward, faPlay, faStop, faSync } from '@fortawesome/free-solid-svg-icons';\n\nimport { AppContext } from \"../../context/AppProvider\";\nimport Button, { ButtonSpacer } from \"../generic/Button\";\nimport { globalPropTypes } from \"../../utils/globalPropTypes\";\nimport { nullFx } from \"../../utils/constants\";\n\n\nconst ButtonIconHolderRow = styled.div`\n    display: flex;\n    justify-items: center;\n    align-items: center;\n    >span {\n        font-size: 18px;\n    }\n    >svg {\n        margin-right: 5px;\n    }\n`;\n\nconst TimerControls = (props) => {\n  const {\n    isTimerRunning,\n    handleSkipToEnd = nullFx,\n    handleStop = nullFx,\n    handleStart = nullFx,\n    handleReset = nullFx,\n    handleResume = nullFx,\n    hasStarted\n  } = useContext(AppContext);\n\n  const { \n    stopDisabled, startDisabled, resetDisabled, resumeDisabled, hideResume, hideReset\n  } = props;\n\n  const resetButton = (\n    <Button onClick={handleReset} variant=\"secondary\" disabled={resetDisabled}>\n        <ButtonIconHolderRow>\n            <FontAwesomeIcon icon={faSync} size=\"xs\"/>\n            <span>RESET</span>\n        </ButtonIconHolderRow>\n    </Button>);\n\n  if (!isTimerRunning) {\n    return (\n      <>\n        <ButtonSpacer>\n            { (hasStarted && !hideResume) &&\n                <Button onClick={handleResume} disabled={resumeDisabled}>\n                    <ButtonIconHolderRow>\n                        <FontAwesomeIcon icon={faPlay} size=\"xs\"/>\n                        <span>RESUME</span>\n                    </ButtonIconHolderRow>\n                </Button>}\n            { !hasStarted &&\n                <Button onClick={handleStart} disabled={startDisabled}>\n                    <ButtonIconHolderRow>\n                        <FontAwesomeIcon icon={faPlay} size=\"xs\"/>\n                        <span>START</span>\n                    </ButtonIconHolderRow>\n                </Button>} \n            { hasStarted && !hideReset && resetButton }\n        </ButtonSpacer>\n      </>\n    )\n  }\n  return (\n    <>\n      <ButtonSpacer>\n        { isTimerRunning &&\n            <Button onClick={handleStop} variant=\"danger\" disabled={stopDisabled}>\n                <ButtonIconHolderRow>\n                    <FontAwesomeIcon icon={faStop} size=\"xs\"/>\n                    <span>STOP</span>\n                </ButtonIconHolderRow>\n            </Button>} \n        { !hideReset && resetButton }\n        { isTimerRunning && \n            <Button onClick={handleSkipToEnd}>\n                <ButtonIconHolderRow>\n                    <FontAwesomeIcon icon={faFastForward} size=\"xs\"/>\n                    <span>FF</span>\n                </ButtonIconHolderRow>\n            </Button> }\n      </ButtonSpacer>\n    </>\n  );\n}\nTimerControls.propTypes = {\n    startDisabled: globalPropTypes.disabled,\n    stopDisabled: globalPropTypes.disabled,\n    resetDisabled: globalPropTypes.disabled,\n    resumeDisabled: globalPropTypes.disabled,\n    hideResume: globalPropTypes.disabled,\n    hideReset: globalPropTypes.disabled\n}\nTimerControls.defaultProps = {\n    startDisabled: false,\n    stopDisabled: false,\n    resetDisabled: false,\n    resumeDisabled: false,\n    hideResume: false,\n    hideReset: false\n}\n\nexport default TimerControls;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport DocumentComponent from \"../components/documentation/DocumentComponent\";\n\nimport Loading from \"../components/generic/Loading\";\nimport Button from \"../components/generic/Button\";\nimport Input from \"../components/generic/Input\";\nimport DisplayTime from \"../components/generic/DisplayTime\";\nimport DisplayRounds from \"../components/generic/DisplayRounds\";\nimport Panel from \"../components/generic/Panel\";\nimport TimeInput from \"../components/generic/TimeInput\";\nimport TimerControls from \"../components/generic/TimerControls\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst Title = styled.div`\n  font-size: 2rem;\n  margin-top: 25px;\n  font-family: Lobster;\n`;\n\nconst Documentation = () => {\n\n  const [ inputValue, setInputValue ] = useState(\"Test\");\n  \n  return (\n    <Container>\n      <div>\n        <Title>Documentation</Title>\n        <DocumentComponent\n          title=\"Loading spinner \"\n          component={<Loading />}\n          propDocs={[\n            {\n              prop: \"size\",\n              description: \"Changes the size of the loading spinner\",\n              type: \"string\",\n              defaultValue: \"'medium'\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Button \"\n          component={<Button onClick={() => alert(\"You clicked the button!\")} />}\n          propDocs={[\n            {\n              prop: \"type\",\n              description: \"HTML attribute type of the button ('button' | 'submit' | 'reset')\",\n              type: \"string\",\n              defaultValue: \"'button'\",\n            },\n            {\n              prop: \"disabled\",\n              description: \"Is the button clickable?\",\n              type: \"boolean\",\n              defaultValue: \"false\",\n            },\n            {\n              prop: \"onClick\",\n              description: \"Function defining what to do when button is clicked\",\n              type: \"function\",\n              defaultValue: \"undefined\",\n            },\n            {\n              prop: \"variant\",\n              description: \"One of: ('primary' | 'secondary' | 'danger')\",\n              type: \"string\",\n              defaultValue: \"'primary'\",\n            },\n            {\n              prop: \"children\",\n              description: \"What to render inside of the button\",\n              type: \"node OR array of nodes\",\n              defaultValue: \"'Click Me'\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Input \"\n          component={<Input name=\"docInput\" onChange={setInputValue} value={inputValue} />}\n          propDocs={[\n            {\n              prop: \"type\",\n              description: \"HTML attribute type of the input ('text' | 'number' | 'submit')\",\n              type: \"string\",\n              defaultValue: \"'text'\",\n            },\n            {\n              prop: \"placeholder\",\n              description: \"Placeholder text for the input\",\n              type: \"string\",\n              defaultValue: \"'Enter text here...'\"\n            },\n            {\n              prop: \"disabled\",\n              description: \"Is is possible to enter text?\",\n              type: \"boolean\",\n              defaultValue: \"false\",\n            },\n            {\n              prop: \"onChange\",\n              description: \"Function defining what to do when text is updated\",\n              type: \"function\",\n              defaultValue: \"undefined\",\n            },\n            {\n              prop: \"name\",\n              description: \"An identifier for this input\",\n              type: \"string\",\n              defaultValue: \"undefined\",\n            },\n            {\n              prop: \"value\",\n              description: \"Current value of the input (should match 'type' prop)\",\n              type: \"string or number\",\n              defaultValue: \"''\",\n            },\n            {\n              prop: \"min\",\n              description: \"If type is number, this will be used as the minimum the field accepts\",\n              type: \"string\",\n              defaultValue: \"undefined\",\n            },\n            {\n              prop: \"max\",\n              description: \"If type is number, this will be used as the maximum the field accepts\",\n              type: \"string\",\n              defaultValue: \"undefined\"\n            }\n          ]}\n        />\n        <DocumentComponent\n          title=\"Display Time \"\n          component={<DisplayTime hours={0} minutes={0} seconds={0} />}\n          propDocs={[\n            {\n              prop: \"hours\",\n              description: \"A numeric representation of hours; max 2 digits\",\n              type: \"number\",\n              defaultValue: \"0\",\n            },\n            {\n              prop: \"minutes\",\n              description: \"A numeric representation of minutes; max 2 digits\",\n              type: \"number\",\n              defaultValue: \"0\",\n            },\n            {\n              prop: \"seconds\",\n              description: \"A numeric representation of seconds; max 2 digits\",\n              type: \"number\",\n              defaultValue: \"0\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Display Rounds \"\n          component={<DisplayRounds />}\n          propDocs={[\n            {        \n              prop: \"currRound\",\n              description: \"The current round\",\n              type: \"number\",\n              defaultValue: \"0\",\n            },\n            {\n              prop: \"totalRounds\",\n              description: \"The total number of rounds selected\",\n              type: \"number\",\n              defaultValue: \"0\"\n            },\n            {\n              prop: \"isRest\",\n              description: \"Is this a rest interval?\",\n              type: \"boolean\",\n              defaultValue: \"false\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Panel \"\n          component={<Panel children={<div/>}/>}\n          propDocs={[\n            {        \n              prop: \"children\",\n              description: \"React children to render inside of the panel\",\n              type: \"node or array of nodes\",\n              defaultValue: \"undefined\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"TimeInput \"\n          component={<TimeInput onChange={() => console.log(\"timeinput\")}/>}\n          propDocs={[\n            {\n              prop: \"hoursVal\",\n              description: \"A numeric representation of hours; max 2 digits\",\n              type: \"number\",\n              defaultValue: \"0\",\n            },\n            {\n              prop: \"minutesVal\",\n              description: \"A numeric representation of minutes; max 2 digits\",\n              type: \"number\",\n              defaultValue: \"0\",\n            },\n            {\n              prop: \"secondsVal\",\n              description: \"A numeric representation of seconds; max 2 digits\",\n              type: \"number\",\n              defaultValue: \"0\",\n            },\n            {\n              prop: \"disabled\",\n              description: \"Should the inputs be disabled or enabled?\",\n              type: \"boolean\",\n              defaultValue: \"false\"\n            },\n            {\n              prop: \"onChange\",\n              description: \"A single function to handle updates for hours, minutes and seconds\",\n              type: \"function\",\n              defaultValue: \"undefined\"\n            }\n          ]}\n        />\n        <DocumentComponent\n          title=\"TimerControls \"\n          component={<TimerControls  startDisabled={true} stopDisabled={true} resetDisabled={true} />}\n          propDocs={[\n            {\n              prop: \"startDisabled\",\n              description: \"Should start button be disabled?\",\n              type: \"boolean\",\n              defaultValue: \"false\",\n            },\n            {\n              prop: \"stopDisabled\",\n              description: \"Should stop button be disabled?\",\n              type: \"boolean\",\n              defaultValue: \"false\"\n            },\n            {\n              prop: \"resetDisabled\",\n              description: \"Should reset button be disabled?\",\n              type: \"boolean\",\n              defaultValue: \"false\"\n            },\n            {\n              prop: \"resumeDisabled\",\n              description: \"Should resume button be disabled?\",\n              type: \"boolean\",\n              defaultValue: \"false\"\n            },\n            {\n              prop: \"hideResume\",\n              description: \"Should resume button be hidden altogether?\",\n              type: \"boolean\",\n              defaultValue: \"false\"\n            },\n            {\n              prop: \"hideReset\",\n              description: \"Should reset button be hidden altogether?\",\n              type: \"boolean\",\n              defaultValue: \"false\"\n            },\n            {\n              prop: \"context (not technically a prop...)\",\n              description: \"This component needs to use global AppContext for event handlers and conditional display.\",\n              type: \"object\",\n              defaultValue: \"undefined\"\n            }\n          ]}\n        />\n      </div>\n    </Container>\n  );\n}\n\nexport default Documentation;\n","import React, { useContext, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nimport { AppContext } from \"../context/AppProvider\";\nimport { H1, themeColors } from \"../utils/tokensAndTheme\";\nimport { displayTimeString } from \"../utils/helpers\";\nimport { nullFx, timerToJSX } from \"../utils/constants\";\n\nimport Panel from \"../components/generic/Panel\";\nimport Button from \"../components/generic/Button\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Timers = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst BottomPanel = styled.div`\n  margin-top: 10px;\n`;\n\nconst RoutinePane = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 250px;\n  height: 350px;\n  justify-content: flex-start;\n  background: linear-gradient(143deg, ${themeColors.timerSelectorGradient1} 0%, ${themeColors.timerSelectorGradient2} 100%);\n  overflow-y: scroll;\n  border-radius: 20px 0 0 20px;\n  padding: 30px;\n`;\n\nconst TimerTitle = styled.div`\n  background-color: ${themeColors.timerSwitchTitle};\n  color: ${themeColors.textMedium};\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 20px 0;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  text-transform: uppercase;\n  font-weight: 700;\n  font-family: SourceCodePro;\n\n  :hover {\n    ${ props => (props.isTimerRunning || props.hasTimerStarted) ? \"\" :\n      `::before {\n        content: \"(DELETE THIS TIMER)\"\n      }` }\n\n    ${ props => (props.isTimerRunning || props.hasTimerStarted) ? \"\": `background-color: ${themeColors.btnDangerHover};\\n`}\n    ${ props => (props.isTimerRunning || props.hasTimerStarted) ? \"\": `color: ${themeColors.textLight};` }\n  }\n`;\n\nconst ActiveTimerTitle = styled(TimerTitle)`\n  background-color: ${themeColors.timerSwitchTitleActive};\n  color: ${themeColors.textLight};\n`;\n\nconst TimerSubtitle = styled.div`\n  font-size: 10px;\n`;\n\nfunction App() {\n  const {\n    hasStarted,\n    timerIdx,\n    isTimerRunning,\n    hasTimerStarted,\n    routineState = [],\n    currRoutineStep,\n    restartRoutine,\n    computeRoutineStepTime,\n    computeTotalRoutineTime,\n    checkForInvalidRoundTimes,\n    deleteTimerFromRoutine\n  } = useContext(AppContext);\n\n  useEffect(() => {\n    checkForInvalidRoundTimes();\n  }, [checkForInvalidRoundTimes]);\n\n  const routineDefined = routineState.length !== 0;\n  if (!routineDefined) {\n    return (\n      <Timers>\n        <div>\n          <H1>Ready to work out?</H1>\n          <Link to=\"/add\">Create a Routine</Link>\n        </div>\n      </Timers>\n    );\n  }\n\n  if (!currRoutineStep) { throw new Error(\"Routine defined, but no current step. TimerIdx might be out of bounds.\")};\n\n  const { type } = currRoutineStep;\n  return (\n    <Wrapper>\n      <Timers>\n        <RoutinePane>\n          { routineState.map((timer, idx) => {\n            if (timerIdx === idx) {\n              return (\n                <ActiveTimerTitle key={timer.uuid} {...{idx, isTimerRunning, hasTimerStarted }} onClick={(e) => deleteTimerFromRoutine(idx)} >\n                  {timer.type}\n                  <TimerSubtitle>({displayTimeString(computeRoutineStepTime(idx))})</TimerSubtitle>\n                </ActiveTimerTitle>\n              );\n            }\n            return (\n              <TimerTitle key={timer.uuid} {...{idx, isTimerRunning, hasTimerStarted }} onClick={(e) => deleteTimerFromRoutine(idx)} >\n                {timer.type}\n                <TimerSubtitle>({displayTimeString(computeRoutineStepTime(idx))})</TimerSubtitle>\n              </TimerTitle>\n            );\n          })}\n          <Link to=\"/add\"><Button variant=\"secondary\" onClick={nullFx}>Add to Routine</Button></Link>\n        </RoutinePane>\n        <Panel>\n          { timerToJSX[type].C }\n        </Panel>\n      </Timers>\n      <BottomPanel>\n        { hasStarted ? \n          <Button onClick={() => restartRoutine()}>Restart Routine</Button>\n          : null }\n        <TimerSubtitle>Total Time: {displayTimeString(computeTotalRoutineTime())}</TimerSubtitle>\n      </BottomPanel> \n    </Wrapper>\n  );\n}\n\nexport default App;\n","import styled from \"styled-components\";\n\n/**\n * Decided to try this towards the end of the project; if I had more time, I'd add more props to it and replace most of the basic\n * positioning/layout styled components with it, and pass the details in as props.\n */\nexport const CustomDiv = styled.div`\n  display: flex;\n  ${ props => props.justifyContent ? `justify-content: ${props.justifyContent};\\n` : \"justify-content: center;\\n\" }\n  ${ props => props.alignItems ? `align-items: ${props.alignItems};\\n` : \"align-items: center;\\n\"}\n  ${ props => props.width ? `width: ${props.width};\\n` : \"\"}\n  ${ props => props.flexDirection ? `flex-direction: ${props.flexDirection};\\n`: \"\"}\n  ${ props => props.marginTop ? `margin-top: ${props.marginTop};\\n`: \"\"}\n  ${ props => props.marginBottom ? `margin-bottom: ${props.marginBottom};\\n`: \"\"}\n  ${ props => props.marginLeft ? `margin-left: ${props.marginLeft};\\n`: \"\"}\n  ${ props => props.marginRight ? `margin-right: ${props.marginRight};\\n`: \"\"}\n  ${ props => props.paddingTop ? `padding-top: ${props.paddingTop};\\n`: \"\"}\n  ${ props => props.paddingBottom ? `padding-bottom: ${props.paddingBottom};\\n`: \"\"}\n  ${ props => props.paddingLeft ? `padding-left: ${props.paddingLeft};\\n`: \"\"}\n  ${ props => props.paddingRight ? `padding-right: ${props.paddingRight};\\n`: \"\"}\n  ${ props => props.backgroundColor ? `background-color: ${props.backgroundColor};\\n`: \"\"}\n`;\n\nexport const Scrollable = styled.div`\n  max-height: 450px;\n  overflow-y: scroll; \n`;\n\nexport const Dropdown = styled.select`\n  padding: 5px;\n  margin: 0 5px;\n`;","import React, { useContext } from \"react\";\n\nimport TimeInput, { TimeInputLabel } from \"../generic/TimeInput\";\nimport Input from \"../generic/Input\";\nimport { RoundsLabel } from \"../generic/DisplayRounds\";\nimport { AppContext } from \"../../context/AppProvider\";\n\n/* Used in AddView.js and contains a timer-specific version of each edit block; the parent common to all edit blocks\nis located in ./EditBlock.js */\nexport const StopwatchEditBlock = (props) => {\n    const { handleSetEndTime } = useContext(AppContext);\n    const { endTime, index } = props;\n    const { 0: hours = \"\", 1: minutes = \"\", 2: seconds = \"\" } = endTime || [];\n\n    return (\n        <>\n            <TimeInputLabel>\n                <strong>End Time:</strong>\n                <TimeInput hoursVal={hours} minutesVal={minutes} secondsVal={seconds}\n                    onChange={(e) => handleSetEndTime(e, index, endTime )} />\n            </TimeInputLabel>\n        </>\n    );\n}\n\nexport const CountdownEditBlock = (props) => {\n    const { handleSetStartTime } = useContext(AppContext);\n    const { startTime, index } = props;\n    const { 0: hours = \"\", 1: minutes = \"\", 2: seconds = \"\" } = startTime || [];\n\n    return (\n        <>\n            <TimeInputLabel>\n                <strong>Start Time:</strong>\n                <TimeInput hoursVal={hours} minutesVal={minutes} secondsVal={seconds}\n                    onChange={(e) => handleSetStartTime(e, index, startTime )} />\n            </TimeInputLabel>\n        </>\n    );\n}\n\nexport const TabataEditBlock = (props) => {\n    const { handleSetWorkTime, handleSetRestTime, handleChangeNumRounds } = useContext(AppContext);\n    const { \n        workTime, restTime, numRounds, index\n    } = props;\n\n    const { 0: workHours = \"\", 1: workMinutes = \"\", 2: workSeconds = \"\" } = workTime || [];\n    const { 0: restHours = \"\", 1: restMinutes = \"\", 2: restSeconds = \"\" } = restTime || [];\n\n    return (\n        <>\n            <TimeInputLabel>\n                <strong>Work Time:</strong>\n                <TimeInput hoursVal={workHours} minutesVal={workMinutes} secondsVal={workSeconds}\n                    onChange={(e) => handleSetWorkTime(e, index, workTime )}/>\n            </TimeInputLabel>\n            <TimeInputLabel>\n                <strong>Rest Time:</strong>\n                <TimeInput hoursVal={restHours} minutesVal={restMinutes} secondsVal={restSeconds}\n                    onChange={(e) => handleSetRestTime(e, index, restTime )}/>\n            </TimeInputLabel>\n            <RoundsLabel>\n                # of Rounds:\n                <Input name=\"numRoundsTabata\" value={numRounds} placeholder=\"1\" onChange={(num) => handleChangeNumRounds(index, num)} />\n            </RoundsLabel>\n        </>\n    );\n}\n\nexport const XYEditBlock = (props) => {\n    const { handleSetStartTime, handleChangeNumRounds } = useContext(AppContext);\n    const { \n        startTime, numRounds, index\n    } = props;\n    const { 0: hours = \"\", 1: minutes = \"\", 2: seconds = \"\" } = startTime || [];\n\n    return (\n        <>\n            <TimeInputLabel>\n                <strong>Start Time:</strong>\n                <TimeInput hoursVal={hours} minutesVal={minutes} secondsVal={seconds}\n                    onChange={(e) => handleSetStartTime(e, index, startTime )} />\n            </TimeInputLabel>\n            <RoundsLabel>\n                # of Rounds:\n                <Input name=\"numRoundsXY\" value={numRounds} placeholder=\"1\" onChange={(num) => handleChangeNumRounds(index, num)} />\n            </RoundsLabel>\n        </>\n    );\n}\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { CustomDiv, Dropdown } from \"../generic/styledComponents\";\nimport { CountdownEditBlock, StopwatchEditBlock, TabataEditBlock, XYEditBlock } from \"./TimerSpecificEditBlocks\";\nimport Button from \"../generic/Button\";\nimport { timerTypes } from \"../../utils/constants\";\n\n/* Used in AddView.js and contains features common to all timers; a timer-specific version of each edit block\nis located in ./TimerSpecificEditBlocks */\nexport const EditBlock = (props) => {\n    const { type, dispatch, index, ...passProps } = props;\n\n    let blockToRender;\n    switch (type) {\n        case \"Stopwatch\": \n            blockToRender = <StopwatchEditBlock {...passProps} {...{ dispatch, index }} />\n            break;\n        case \"Countdown\": \n            blockToRender = <CountdownEditBlock {...passProps} {...{ dispatch, index }} />\n            break;\n        case \"Tabata\":\n            blockToRender = <TabataEditBlock {...passProps} {...{ dispatch, index }} />\n            break;\n        case \"XY\": \n            blockToRender = <XYEditBlock {...passProps} {...{ dispatch, index }} />\n            break;\n        default:\n            throw new Error(\"Unrecognized type of timer in EditBlock #\" + index);\n    }\n\n    return (\n        <CustomDiv flexDirection=\"column\" paddingTop=\"20px\" paddingBottom=\"20px\" paddingLeft=\"40px\" paddingRight=\"40px\" backgroundColor=\"#ffffff\" marginTop=\"10px\">\n            <CustomDiv alignItems=\"center\" justifyContent=\"center\">\n                <div>\n                    <strong>Type:</strong>\n                    <Dropdown value={type} onChange={(e) => dispatch({ type: \"changePropVal\", indexToChange: index, newValue: e.target.value, propName: \"type\" })} >\n                        {timerTypes.map(timer => <option key={timer} value={timer}>{timer}</option>) }\n                    </Dropdown>\n                </div>\n                <Button variant=\"danger\" onClick={() => dispatch({ type: \"removeTimer\", indexToRemove: index })} >\n                    <FontAwesomeIcon icon={faTrash} size=\"xs\"/>\n                </Button>\n            </CustomDiv>\n            { blockToRender }\n        </CustomDiv>\n    );\n};","import React, { useContext } from \"react\";\nimport { faArrowLeft, faPlus, faSync } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { AppContext } from \"../context/AppProvider\";\n\nimport { CustomDiv, Scrollable } from \"../components/generic/styledComponents\";\nimport { H1 } from \"../utils/tokensAndTheme\";\nimport { EditBlock } from \"../components/add/EditBlock\";\nimport Button from \"../components/generic/Button\";\nimport { Link } from \"react-router-dom\";\nimport { nullFx } from \"../utils/constants\";\n\n\nconst AddView = () => {\n    const { routineState = [], dispatch } = useContext(AppContext);\n\n    return (\n        <CustomDiv flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\n            <H1>Add to Workout Routine</H1>\n\n            <CustomDiv alignItems=\"center\" justifyContent=\"center\" marginTop=\"10px\" marginBottom=\"10px\">\n               <Link to=\"/\">\n                    <Button variant=\"secondary\" onClick={nullFx}>\n                        <FontAwesomeIcon icon={faArrowLeft} size=\"xs\"/>\n                        Back to Timers\n                    </Button>\n                </Link>\n            </CustomDiv>\n\n            <Scrollable>\n                {routineState.map((timer, i) => {\n                    const { uuid } = timer;\n                    return <EditBlock key={uuid} {...timer} index={i} {...{ dispatch }} />\n                })}\n            </Scrollable>\n\n            <CustomDiv alignItems=\"center\" justifyContent=\"center\">\n                <Button onClick={() => dispatch({ type: \"addTimer\" })}>\n                    <FontAwesomeIcon icon={faPlus} size=\"xs\"/>\n                    Add New Timer\n                </Button>\n                { (routineState.length !== 0) &&\n                    <Button variant=\"danger\" onClick={() => dispatch({ type: \"clearAll\" })}>\n                        <FontAwesomeIcon icon={faSync} size=\"xs\"/>\n                        Start Over\n                    </Button>}\n            </CustomDiv>\n        </CustomDiv>\n    );\n};\n\nexport default AddView;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport DocumentationView from \"./views/DocumentationView\";\nimport TimersView from \"./views/TimersView\";\nimport AddView from \"./views/AddView\";\n\nimport AppProvider from \"./context/AppProvider\";\n\nconst Container = styled.div`\n  background: #f0f6fb;\n  height: 100vh;\n  overflow: auto;\n`;\n\nconst Nav = styled.ul`\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  background-color: #333333;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst NavItem = styled.li`\n  display: inline-block;\n  padding: 10px;\n  text-decoration: none;\n  \n  >a {\n    color: #ffffff;\n    :hover {\n      color: #dedede;\n    }\n  }\n`;\n\nconst ViewCenterer = styled.div`\n  display: flex;\n  height: calc(100% - 40px);\n  justify-content: center;\n`;\n\nfunction App() {\n  return (\n    <Container>\n      <Router>\n        <nav>\n          <Nav>\n            <NavItem>\n              <Link to=\"/\">Timers</Link>\n            </NavItem>\n            <NavItem>\n              <Link to=\"/docs\">Documentation</Link>\n            </NavItem>\n          </Nav>\n        </nav>\n        <ViewCenterer>\n          <Switch>\n            <Route path=\"/docs\">\n              <DocumentationView />\n            </Route>\n            <Route path=\"/add\">\n              <AppProvider>\n                <AddView />\n              </AppProvider>\n            </Route>\n            <Route path=\"/\">\n              <AppProvider>\n                <TimersView />\n              </AppProvider>\n            </Route>\n          </Switch>\n        </ViewCenterer>\n      </Router>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}